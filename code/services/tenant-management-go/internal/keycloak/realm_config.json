{
  "realm": "{{.TenantCode}}",
  "notBefore": 0,
  "defaultSignatureAlgorithm": "RS256",
  "revokeRefreshToken": false,
  "refreshTokenMaxReuse": 0,
  "accessTokenLifespan": 300,
  "accessTokenLifespanForImplicitFlow": 900,
  "ssoSessionIdleTimeout": 1800,
  "ssoSessionMaxLifespan": 36000,
  "ssoSessionIdleTimeoutRememberMe": 0,
  "ssoSessionMaxLifespanRememberMe": 0,
  "offlineSessionIdleTimeout": 2592000,
  "offlineSessionMaxLifespanEnabled": false,
  "offlineSessionMaxLifespan": 5184000,
  "clientSessionIdleTimeout": 0,
  "clientSessionMaxLifespan": 0,
  "clientOfflineSessionIdleTimeout": 0,
  "clientOfflineSessionMaxLifespan": 0,
  "accessCodeLifespan": 60,
  "accessCodeLifespanUserAction": 300,
  "accessCodeLifespanLogin": 1800,
  "actionTokenGeneratedByAdminLifespan": 43200,
  "actionTokenGeneratedByUserLifespan": 300,
  "oauth2DeviceCodeLifespan": 600,
  "oauth2DevicePollingInterval": 5,
  "enabled": true,
  "sslRequired": "external",
  "registrationAllowed": true,
  "registrationEmailAsUsername": false,
  "rememberMe": false,
  "verifyEmail": false,
  "loginWithEmailAllowed": true,
  "duplicateEmailsAllowed": false,
  "resetPasswordAllowed": false,
  "editUsernameAllowed": false,
  "bruteForceProtected": false,
  "permanentLockout": false,
  "maxTemporaryLockouts": 0,
  "maxFailureWaitSeconds": 900,
  "minimumQuickLoginWaitSeconds": 60,
  "waitIncrementSeconds": 60,
  "quickLoginCheckMilliSeconds": 1000,
  "maxDeltaTimeSeconds": 43200,
  "failureFactor": 30,
  "roles": {
    "realm": [
      {
        "name": "default-roles-{{.TenantCodeLowerCase}}",
        "description": "${role_default-roles}",
        "composite": true,
        "composites": {
          "realm": [
            "offline_access",
            "uma_authorization"
          ],
          "client": {
            "account": [
              "view-profile",
              "manage-account"
            ]
          }
        },
        "clientRole": false,
        "attributes": {}
      },
      {
        "name": "offline_access",
        "description": "${role_offline-access}",
        "composite": false,
        "clientRole": false,
        "attributes": {}
      },
      {
        "name": "uma_authorization",
        "description": "${role_uma_authorization}",
        "composite": false,
        "clientRole": false,
        "attributes": {}
      },
      {
        "name": "SUPERUSER",
        "description": "Superuser",
        "composite": false,
        "clientRole": false,
        "attributes": {}
      },
      {
        "name": "ADMIN",
        "description": "Admin",
        "composite": false,
        "clientRole": false,
        "attributes": {}
      },
      {
        "name": "COMPLAINTS_ADMIN",
        "description": "Complaints Admin",
        "composite": false,
        "clientRole": false,
        "attributes": {}
      },
      {
        "name": "RESOLVER",
        "description": "Resolver",
        "composite": false,
        "clientRole": false,
        "attributes": {}
      },
      {
        "name": "ASSIGNER",
        "description": "Assigner",
        "composite": false,
        "clientRole": false,
        "attributes": {}
      },
      {
        "name": "EMPLOYEE",
        "description": "Employee",
        "composite": false,
        "clientRole": false,
        "attributes": {}
      },
      {
        "name": "CITIZEN",
        "description": "Citizen",
        "composite": false,
        "clientRole": false,
        "attributes": {}
      }
    ],
    "client": {
      "realm-management": [
        {
          "name": "create-client",
          "description": "${role_create-client}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "manage-clients",
          "description": "${role_manage-clients}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "query-realms",
          "description": "${role_query-realms}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "query-users",
          "description": "${role_query-users}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "view-identity-providers",
          "description": "${role_view-identity-providers}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "manage-users",
          "description": "${role_manage-users}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "view-realm",
          "description": "${role_view-realm}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "view-events",
          "description": "${role_view-events}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "manage-realm",
          "description": "${role_manage-realm}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "query-groups",
          "description": "${role_query-groups}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "query-clients",
          "description": "${role_query-clients}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "realm-admin",
          "description": "${role_realm-admin}",
          "composite": true,
          "composites": {
            "client": {
              "realm-management": [
                "create-client",
                "manage-clients",
                "query-realms",
                "query-users",
                "view-identity-providers",
                "view-realm",
                "manage-users",
                "view-events",
                "manage-realm",
                "query-groups",
                "query-clients",
                "view-users",
                "manage-identity-providers",
                "manage-events",
                "view-authorization",
                "manage-authorization",
                "impersonation",
                "view-clients"
              ]
            }
          },
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "view-users",
          "description": "${role_view-users}",
          "composite": true,
          "composites": {
            "client": {
              "realm-management": [
                "query-users",
                "query-groups"
              ]
            }
          },
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "manage-identity-providers",
          "description": "${role_manage-identity-providers}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "manage-events",
          "description": "${role_manage-events}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "view-authorization",
          "description": "${role_view-authorization}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "impersonation",
          "description": "${role_impersonation}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "manage-authorization",
          "description": "${role_manage-authorization}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "view-clients",
          "description": "${role_view-clients}",
          "composite": true,
          "composites": {
            "client": {
              "realm-management": [
                "query-clients"
              ]
            }
          },
          "clientRole": true,
          "attributes": {}
        }
      ],
      "security-admin-console": [],
      "auth-server": [
        {
          "name": "uma_protection",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        }
      ],
      "admin-cli": [],
      "sandbox-ui-client": [],
      "account-console": [],
      "broker": [
        {
          "name": "read-token",
          "description": "${role_read-token}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        }
      ],
      "account": [
        {
          "name": "delete-account",
          "description": "${role_delete-account}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "view-profile",
          "description": "${role_view-profile}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "manage-account-links",
          "description": "${role_manage-account-links}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "manage-consent",
          "description": "${role_manage-consent}",
          "composite": true,
          "composites": {
            "client": {
              "account": [
                "view-consent"
              ]
            }
          },
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "view-groups",
          "description": "${role_view-groups}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "manage-account",
          "description": "${role_manage-account}",
          "composite": true,
          "composites": {
            "client": {
              "account": [
                "manage-account-links"
              ]
            }
          },
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "view-applications",
          "description": "${role_view-applications}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        },
        {
          "name": "view-consent",
          "description": "${role_view-consent}",
          "composite": false,
          "clientRole": true,
          "attributes": {}
        }
      ]
    }
  },
  "groups": [],
  "defaultRole": {
    "name": "default-roles-{{.TenantCodeLowerCase}}",
    "description": "${role_default-roles}",
    "composite": true,
    "clientRole": false
  },
  "requiredCredentials": [
    "password"
  ],
  "otpPolicyType": "totp",
  "otpPolicyAlgorithm": "HmacSHA1",
  "otpPolicyInitialCounter": 0,
  "otpPolicyDigits": 6,
  "otpPolicyLookAheadWindow": 1,
  "otpPolicyPeriod": 30,
  "otpPolicyCodeReusable": false,
  "otpSupportedApplications": [
    "totpAppFreeOTPName",
    "totpAppGoogleName",
    "totpAppMicrosoftAuthenticatorName"
  ],
  "localizationTexts": {},
  "webAuthnPolicyRpEntityName": "keycloak",
  "webAuthnPolicySignatureAlgorithms": [
    "ES256"
  ],
  "webAuthnPolicyRpId": "",
  "webAuthnPolicyAttestationConveyancePreference": "not specified",
  "webAuthnPolicyAuthenticatorAttachment": "not specified",
  "webAuthnPolicyRequireResidentKey": "not specified",
  "webAuthnPolicyUserVerificationRequirement": "not specified",
  "webAuthnPolicyCreateTimeout": 0,
  "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
  "webAuthnPolicyAcceptableAaguids": [],
  "webAuthnPolicyExtraOrigins": [],
  "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
  "webAuthnPolicyPasswordlessSignatureAlgorithms": [
    "ES256"
  ],
  "webAuthnPolicyPasswordlessRpId": "",
  "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
  "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
  "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
  "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
  "webAuthnPolicyPasswordlessCreateTimeout": 0,
  "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
  "webAuthnPolicyPasswordlessAcceptableAaguids": [],
  "webAuthnPolicyPasswordlessExtraOrigins": [],
  "users": [
    {
      "username": "service-account-auth-server",
      "emailVerified": false,
      "enabled": true,
      "totp": false,
      "serviceAccountClientId": "auth-server",
      "disableableCredentialTypes": [],
      "requiredActions": [],
      "realmRoles": [
        "default-roles-{{.TenantCodeLowerCase}}"
      ],
      "clientRoles": {
        "auth-server": [
          "uma_protection"
        ]
      },
      "notBefore": 0,
      "groups": []
    },
    {
      "username": "{{.TenantEmail}}",
      "firstName": "{{.TenantName}}",
      "lastName": "Superuser",
      "email": "{{.TenantEmail}}",
      "emailVerified": true,
      "attributes": {
        "mobileNumber": [
          "{{.MobileNumber}}"
        ]
      },
      "enabled": true,
      "totp": false,
      "credentials": [
        {
          "type": "password",
          "value": "default",
          "temporary": false
        }
      ],
      "disableableCredentialTypes": [],
      "requiredActions": [],
      "realmRoles": [
        "default-roles-{{.TenantCodeLowerCase}}",
        "SUPERUSER"
      ],
      "clientRoles": {
        "realm-management": [
          "manage-clients",
          "manage-realm",
          "view-users",
          "manage-users",
          "realm-admin",
          "create-client",
          "query-clients",
          "view-realm",
          "query-users"
        ]
      },
      "notBefore": 0,
      "groups": []
    }
  ],
  "scopeMappings": [
    {
      "clientScope": "offline_access",
      "roles": [
        "offline_access"
      ]
    }
  ],
  "clientScopeMappings": {
    "account": [
      {
        "client": "account-console",
        "roles": [
          "manage-account",
          "view-groups"
        ]
      }
    ]
  },
  "clients": [
    {
      "clientId": "account",
      "name": "${client_account}",
      "rootUrl": "{{.AuthBaseUrl}}",
      "baseUrl": "/realms/{{.TenantCode}}/account/",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "redirectUris": [
        "/realms/{{.TenantCode}}/account/*"
      ],
      "webOrigins": [],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "publicClient": true,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {
        "post.logout.redirect.uris": "+"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "profile",
        "roles",
        "basic",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "clientId": "account-console",
      "name": "${client_account-console}",
      "rootUrl": "{{.AuthBaseUrl}}",
      "baseUrl": "/realms/{{.TenantCode}}/account/",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "redirectUris": [
        "/realms/{{.TenantCode}}/account/*"
      ],
      "webOrigins": [],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "publicClient": true,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {
        "post.logout.redirect.uris": "+",
        "pkce.code.challenge.method": "S256"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "protocolMappers": [
        {
          "name": "audience resolve",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-audience-resolve-mapper",
          "consentRequired": false,
          "config": {}
        }
      ],
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "profile",
        "roles",
        "basic",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "clientId": "admin-cli",
      "name": "${client_admin-cli}",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "redirectUris": [],
      "webOrigins": [],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": false,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": true,
      "serviceAccountsEnabled": false,
      "publicClient": true,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "profile",
        "roles",
        "basic",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "clientId": "broker",
      "name": "${client_broker}",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "redirectUris": [],
      "webOrigins": [],
      "notBefore": 0,
      "bearerOnly": true,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "publicClient": false,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "profile",
        "roles",
        "basic",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "clientId": "realm-management",
      "name": "${client_realm-management}",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "redirectUris": [],
      "webOrigins": [],
      "notBefore": 0,
      "bearerOnly": true,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "publicClient": false,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "profile",
        "roles",
        "basic",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "clientId": "security-admin-console",
      "name": "${client_security-admin-console}",
      "rootUrl": "{{.AuthAdminUrl}}",
      "baseUrl": "/admin/{{.TenantCode}}/console/",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "redirectUris": [
        "/admin/{{.TenantCode}}/console/*"
      ],
      "webOrigins": [
        "+"
      ],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "publicClient": true,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {
        "post.logout.redirect.uris": "+",
        "pkce.code.challenge.method": "S256"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "protocolMappers": [
        {
          "name": "locale",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "locale",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "locale",
            "jsonType.label": "String"
          }
        }
      ],
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "profile",
        "roles",
        "basic",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "clientId": "auth-server",
      "name": "",
      "description": "",
      "rootUrl": "",
      "adminUrl": "",
      "baseUrl": "",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "{{.AuthServerClientSecret}}",
      "redirectUris": [
        "/*"
      ],
      "webOrigins": [
        "/*"
      ],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": true,
      "serviceAccountsEnabled": true,
      "authorizationServicesEnabled": true,
      "publicClient": false,
      "frontchannelLogout": true,
      "protocol": "openid-connect",
      "attributes": {
        "oidc.ciba.grant.enabled": "false",
        "backchannel.logout.session.required": "true",
        "oauth2.device.authorization.grant.enabled": "false",
        "backchannel.logout.revoke.offline.tokens": "false"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": true,
      "nodeReRegistrationTimeout": -1,
      "protocolMappers": [
        {
          "name": "Client IP Address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "clientAddress",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "clientAddress",
            "jsonType.label": "String"
          }
        },
        {
          "name": "Client ID",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "client_id",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "client_id",
            "jsonType.label": "String"
          }
        },
        {
          "name": "Client Host",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "clientHost",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "clientHost",
            "jsonType.label": "String"
          }
        }
      ],
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "profile",
        "roles",
        "basic",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ],
      "authorizationSettings": {
        "allowRemoteResourceManagement": true,
        "policyEnforcementMode": "ENFORCING",
        "resources": [
          {
            "name": "account",
            "ownerManagedAccess": false,
            "displayName": "Account",
            "attributes": {},
            "uris": ["/account"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "account-config",
            "ownerManagedAccess": false,
            "displayName": "Account Config",
            "attributes": {},
            "uris": ["/account/config"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "template",
            "ownerManagedAccess": false,
            "displayName": "Template",
            "attributes": {},
            "uris": ["/template"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "generate",
            "ownerManagedAccess": false,
            "displayName": "Generate",
            "attributes": {},
            "uris": ["/generate"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "template-config-v1-config",
            "ownerManagedAccess": false,
            "displayName": "Template Config V1 Config",
            "attributes": {},
            "uris": ["/template-config/v1/config"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "template-config-v1-render",
            "ownerManagedAccess": false,
            "displayName": "Template Config V1 Render",
            "attributes": {},
            "uris": ["/template-config/v1/render"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "notification-template",
            "ownerManagedAccess": false,
            "displayName": "Notification Template",
            "attributes": {},
            "uris": ["/notification/template"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "notification-template-preview",
            "ownerManagedAccess": false,
            "displayName": "Notification Template Preview",
            "attributes": {},
            "uris": ["/notification/template/preview"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "notification-email-send",
            "ownerManagedAccess": false,
            "displayName": "Notification Email Send",
            "attributes": {},
            "uris": ["/notification/email/send"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "notification-sms-send",
            "ownerManagedAccess": false,
            "displayName": "Notification SMS Send",
            "attributes": {},
            "uris": ["/notification/sms/send"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "mdms-v2-v2",
            "ownerManagedAccess": false,
            "displayName": "MDMS V2 V2",
            "attributes": {},
            "uris": ["/mdms-v2/v2"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "mdms-v2-v1-mdms",
            "ownerManagedAccess": false,
            "displayName": "MDMS V2 V1 MDMS",
            "attributes": {},
            "uris": ["/mdms-v2/v1/mdms"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "mdms-v2-v1-schema",
            "ownerManagedAccess": false,
            "displayName": "MDMS V2 V1 Schema",
            "attributes": {},
            "uris": ["/mdms-v2/v1/schema"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "shortener",
            "ownerManagedAccess": false,
            "displayName": "Shortener",
            "attributes": {},
            "uris": ["/shortener"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "workflow-v3-process",
            "ownerManagedAccess": false,
            "displayName": "Workflow V3 Process",
            "attributes": {},
            "uris": ["/workflow/v3/process"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "workflow-v3-process-definition",
            "ownerManagedAccess": false,
            "displayName": "Workflow V3 Process Definition",
            "attributes": {},
            "uris": ["/workflow/v3/process/definition"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "workflow-v3-process-state",
            "ownerManagedAccess": false,
            "displayName": "Workflow V3 Process State",
            "attributes": {},
            "uris": ["/workflow/v3/process/state"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "workflow-v3-state",
            "ownerManagedAccess": false,
            "displayName": "Workflow V3 State",
            "attributes": {},
            "uris": ["/workflow/v3/state"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "workflow-v3-action",
            "ownerManagedAccess": false,
            "displayName": "Workflow V3 Action",
            "attributes": {},
            "uris": ["/workflow/v3/action"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "workflow-v3-transition",
            "ownerManagedAccess": false,
            "displayName": "Workflow V3 Transition",
            "attributes": {},
            "uris": ["/workflow/v3/transition"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "filestore-v1-files-upload-post",
            "ownerManagedAccess": false,
            "displayName": "Filestore V1 Files Upload POST",
            "attributes": {},
            "uris": ["/filestore/v1/files/upload"],
            "scopes": ["post"],
            "icon_uri": ""
          },
          {
            "name": "filestore-v1-files-download-urls-get",
            "ownerManagedAccess": false,
            "displayName": "Filestore V1 Files Download URLs GET",
            "attributes": {},
            "uris": ["/filestore/v1/files/download-urls"],
            "scopes": ["get"],
            "icon_uri": ""
          },
          {
            "name": "filestore-v1-files-upload-url-post",
            "ownerManagedAccess": false,
            "displayName": "Filestore V1 Files Upload URL POST",
            "attributes": {},
            "uris": ["/filestore/v1/files/upload-url"],
            "scopes": ["post"],
            "icon_uri": ""
          },
          {
            "name": "filestore-v1-files-confirm-upload-post",
            "ownerManagedAccess": false,
            "displayName": "Filestore V1 Files Confirm Upload POST",
            "attributes": {},
            "uris": ["/filestore/v1/files/confirm-upload"],
            "scopes": ["post"],
            "icon_uri": ""
          },
          {
            "name": "filestore-v1-files-tag-post",
            "ownerManagedAccess": false,
            "displayName": "Filestore V1 Files Tag POST",
            "attributes": {},
            "uris": ["/filestore/v1/files/tag"],
            "scopes": ["post"],
            "icon_uri": ""
          },
          {
            "name": "filestore-v1-files-metadata-post",
            "ownerManagedAccess": false,
            "displayName": "Filestore V1 Files Metadata POST",
            "attributes": {},
            "uris": ["/filestore/v1/files/metadata"],
            "scopes": ["post"],
            "icon_uri": ""
          },
          {
            "name": "filestore-v1-files-document-categories-get",
            "ownerManagedAccess": false,
            "displayName": "Filestore V1 Files Document Categories GET",
            "attributes": {},
            "uris": ["/filestore/v1/files/document-categories"],
            "scopes": ["get"],
            "icon_uri": ""
          },
          {
            "name": "filestore-v1-files-document-categories-put",
            "ownerManagedAccess": false,
            "displayName": "Filestore V1 Files Document Categories PUT",
            "attributes": {},
            "uris": ["/filestore/v1/files/document-categories"],
            "scopes": ["put"],
            "icon_uri": ""
          },
          {
            "name": "filestore-v1-files-document-categories-delete",
            "ownerManagedAccess": false,
            "displayName": "Filestore V1 Files Document Categories DELETE",
            "attributes": {},
            "uris": ["/filestore/v1/files/document-categories"],
            "scopes": ["delete"],
            "icon_uri": ""
          },
          {
            "name": "localization-messages-get",
            "ownerManagedAccess": false,
            "displayName": "Localization Messages GET",
            "attributes": {},
            "uris": ["/localization/messages"],
            "scopes": ["get"],
            "icon_uri": ""
          },
          {
            "name": "localization-messages-post",
            "ownerManagedAccess": false,
            "displayName": "Localization Messages POST",
            "attributes": {},
            "uris": ["/localization/messages"],
            "scopes": ["post"],
            "icon_uri": ""
          },
          {
            "name": "localization-messages-put",
            "ownerManagedAccess": false,
            "displayName": "Localization Messages PUT",
            "attributes": {},
            "uris": ["/localization/messages"],
            "scopes": ["put"],
            "icon_uri": ""
          },
          {
            "name": "localization-messages-upsert-put",
            "ownerManagedAccess": false,
            "displayName": "Localization Messages Upsert PUT",
            "attributes": {},
            "uris": ["/localization/messages/_upsert"],
            "scopes": ["put"],
            "icon_uri": ""
          },
          {
            "name": "localization-messages-delete",
            "ownerManagedAccess": false,
            "displayName": "Localization Messages DELETE",
            "attributes": {},
            "uris": ["/localization/messages"],
            "scopes": ["delete"],
            "icon_uri": ""
          },
          {
            "name": "localization-messages-missing-post",
            "ownerManagedAccess": false,
            "displayName": "Localization Messages Missing POST",
            "attributes": {},
            "uris": ["/localization/messages/_missing"],
            "scopes": ["post"],
            "icon_uri": ""
          },
          {
            "name": "localization-cache-bust-delete",
            "ownerManagedAccess": false,
            "displayName": "Localization Cache Bust DELETE",
            "attributes": {},
            "uris": ["/localization/cache/_bust"],
            "scopes": ["delete"],
            "icon_uri": ""
          },
          {
            "name": "boundary",
            "ownerManagedAccess": false,
            "displayName": "Boundary",
            "attributes": {},
            "uris": ["/boundary"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "boundary-hierarchy-definition",
            "ownerManagedAccess": false,
            "displayName": "Boundary Hierarchy Definition",
            "attributes": {},
            "uris": ["/boundary-hierarchy-definition"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "boundary-relationships",
            "ownerManagedAccess": false,
            "displayName": "Boundary Relationships",
            "attributes": {},
            "uris": ["/boundary-relationships"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          },
          {
            "name": "shapefile-boundary-create",
            "ownerManagedAccess": false,
            "displayName": "Shapefile Boundary Create",
            "attributes": {},
            "uris": ["/shapefile/boundary/create"],
            "scopes": ["get", "post", "put", "delete"],
            "icon_uri": ""
          }
        ],
        "policies": [
          {
            "name": "keycloak-demo",
            "description": "",
            "type": "role",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "fetchRoles": "false",
              "roles": "[{\"id\":\"CITIZEN\",\"required\":false},{\"id\":\"EMPLOYEE\",\"required\":false},{\"id\":\"SUPERUSER\",\"required\":false}]"
            }
          },
          {
            "name": "boundary-get-permission",
            "description": "Permission for GET scope on boundary resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "boundary-post-permission",
            "description": "Permission for POST scope on boundary resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "boundary-put-permission",
            "description": "Permission for PUT scope on boundary resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "boundary-delete-permission",
            "description": "Permission for DELETE scope on boundary resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "account-get-permission",
            "description": "Permission for GET scope on account resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"account\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "account-post-permission",
            "description": "Permission for POST scope on account resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"account\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "account-put-permission",
            "description": "Permission for PUT scope on account resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"account\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "account-delete-permission",
            "description": "Permission for DELETE scope on account resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"account\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "account-config-get-permission",
            "description": "Permission for GET scope on account-config resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"account-config\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "account-config-post-permission",
            "description": "Permission for POST scope on account-config resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"account-config\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "account-config-put-permission",
            "description": "Permission for PUT scope on account-config resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"account-config\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "account-config-delete-permission",
            "description": "Permission for DELETE scope on account-config resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"account-config\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-get-permission",
            "description": "Permission for GET scope on template resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-post-permission",
            "description": "Permission for POST scope on template resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-put-permission",
            "description": "Permission for PUT scope on template resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-delete-permission",
            "description": "Permission for DELETE scope on template resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "generate-get-permission",
            "description": "Permission for GET scope on generate resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"generate\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "generate-post-permission",
            "description": "Permission for POST scope on generate resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"generate\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "generate-put-permission",
            "description": "Permission for PUT scope on generate resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"generate\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "generate-delete-permission",
            "description": "Permission for DELETE scope on generate resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"generate\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "boundary-hierarchy-definition-get-permission",
            "description": "Permission for GET scope on boundary-hierarchy-definition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary-hierarchy-definition\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "boundary-hierarchy-definition-post-permission",
            "description": "Permission for POST scope on boundary-hierarchy-definition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary-hierarchy-definition\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "boundary-hierarchy-definition-put-permission",
            "description": "Permission for PUT scope on boundary-hierarchy-definition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary-hierarchy-definition\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "boundary-hierarchy-definition-delete-permission",
            "description": "Permission for DELETE scope on boundary-hierarchy-definition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary-hierarchy-definition\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "boundary-relationships-get-permission",
            "description": "Permission for GET scope on boundary-relationships resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary-relationships\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "boundary-relationships-post-permission",
            "description": "Permission for POST scope on boundary-relationships resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary-relationships\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "boundary-relationships-put-permission",
            "description": "Permission for PUT scope on boundary-relationships resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary-relationships\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "boundary-relationships-delete-permission",
            "description": "Permission for DELETE scope on boundary-relationships resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"boundary-relationships\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-config-v1-config-get-permission",
            "description": "Permission for GET scope on template-config-v1-config resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template-config-v1-config\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-config-v1-config-post-permission",
            "description": "Permission for POST scope on template-config-v1-config resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template-config-v1-config\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-config-v1-config-put-permission",
            "description": "Permission for PUT scope on template-config-v1-config resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template-config-v1-config\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-config-v1-config-delete-permission",
            "description": "Permission for DELETE scope on template-config-v1-config resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template-config-v1-config\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-config-v1-render-get-permission",
            "description": "Permission for GET scope on template-config-v1-render resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template-config-v1-render\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-config-v1-render-post-permission",
            "description": "Permission for POST scope on template-config-v1-render resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template-config-v1-render\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-config-v1-render-put-permission",
            "description": "Permission for PUT scope on template-config-v1-render resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template-config-v1-render\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "template-config-v1-render-delete-permission",
            "description": "Permission for DELETE scope on template-config-v1-render resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"template-config-v1-render\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-template-get-permission",
            "description": "Permission for GET scope on notification-template resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-template\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-template-post-permission",
            "description": "Permission for POST scope on notification-template resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-template\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-template-put-permission",
            "description": "Permission for PUT scope on notification-template resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-template\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-template-delete-permission",
            "description": "Permission for DELETE scope on notification-template resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-template\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "shortener-get-permission",
            "description": "Permission for GET scope on shortener resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"shortener\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "shortener-post-permission",
            "description": "Permission for POST scope on shortener resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"shortener\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "shortener-put-permission",
            "description": "Permission for PUT scope on shortener resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"shortener\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "shortener-delete-permission",
            "description": "Permission for DELETE scope on shortener resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"shortener\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "shapefile-boundary-create-get-permission",
            "description": "Permission for GET scope on shapefile-boundary-create resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"shapefile-boundary-create\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "shapefile-boundary-create-post-permission",
            "description": "Permission for POST scope on shapefile-boundary-create resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"shapefile-boundary-create\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "shapefile-boundary-create-put-permission",
            "description": "Permission for PUT scope on shapefile-boundary-create resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"shapefile-boundary-create\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "shapefile-boundary-create-delete-permission",
            "description": "Permission for DELETE scope on shapefile-boundary-create resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"shapefile-boundary-create\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "localization-messages-get-permission",
            "description": "Permission for GET scope on localization-messages-get resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"localization-messages-get\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "localization-messages-post-permission",
            "description": "Permission for POST scope on localization-messages-post resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"localization-messages-post\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "localization-messages-put-permission",
            "description": "Permission for PUT scope on localization-messages-put resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"localization-messages-put\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "localization-messages-upsert-put-permission",
            "description": "Permission for PUT scope on localization-messages-upsert-put resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"localization-messages-upsert-put\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "localization-messages-delete-permission",
            "description": "Permission for DELETE scope on localization-messages-delete resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"localization-messages-delete\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "localization-messages-missing-post-permission",
            "description": "Permission for POST scope on localization-messages-missing-post resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"localization-messages-missing-post\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "localization-cache-bust-delete-permission",
            "description": "Permission for DELETE scope on localization-cache-bust-delete resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"localization-cache-bust-delete\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v2-get-permission",
            "description": "Permission for GET scope on mdms-v2-v2 resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v2\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v2-post-permission",
            "description": "Permission for POST scope on mdms-v2-v2 resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v2\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v2-put-permission",
            "description": "Permission for PUT scope on mdms-v2-v2 resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v2\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v2-delete-permission",
            "description": "Permission for DELETE scope on mdms-v2-v2 resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v2\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v1-mdms-get-permission",
            "description": "Permission for GET scope on mdms-v2-v1-mdms resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v1-mdms\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v1-mdms-post-permission",
            "description": "Permission for POST scope on mdms-v2-v1-mdms resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v1-mdms\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v1-mdms-put-permission",
            "description": "Permission for PUT scope on mdms-v2-v1-mdms resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v1-mdms\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v1-mdms-delete-permission",
            "description": "Permission for DELETE scope on mdms-v2-v1-mdms resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v1-mdms\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v1-schema-get-permission",
            "description": "Permission for GET scope on mdms-v2-v1-schema resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v1-schema\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v1-schema-post-permission",
            "description": "Permission for POST scope on mdms-v2-v1-schema resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v1-schema\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v1-schema-put-permission",
            "description": "Permission for PUT scope on mdms-v2-v1-schema resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v1-schema\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "mdms-v2-v1-schema-delete-permission",
            "description": "Permission for DELETE scope on mdms-v2-v1-schema resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"mdms-v2-v1-schema\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-template-preview-get-permission",
            "description": "Permission for GET scope on notification-template-preview resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-template-preview\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-template-preview-post-permission",
            "description": "Permission for POST scope on notification-template-preview resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-template-preview\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-template-preview-put-permission",
            "description": "Permission for PUT scope on notification-template-preview resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-template-preview\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-template-preview-delete-permission",
            "description": "Permission for DELETE scope on notification-template-preview resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-template-preview\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-email-send-get-permission",
            "description": "Permission for GET scope on notification-email-send resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-email-send\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-email-send-post-permission",
            "description": "Permission for POST scope on notification-email-send resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-email-send\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-email-send-put-permission",
            "description": "Permission for PUT scope on notification-email-send resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-email-send\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-email-send-delete-permission",
            "description": "Permission for DELETE scope on notification-email-send resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-email-send\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-sms-send-get-permission",
            "description": "Permission for GET scope on notification-sms-send resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-sms-send\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-sms-send-post-permission",
            "description": "Permission for POST scope on notification-sms-send resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-sms-send\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-sms-send-put-permission",
            "description": "Permission for PUT scope on notification-sms-send resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-sms-send\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "notification-sms-send-delete-permission",
            "description": "Permission for DELETE scope on notification-sms-send resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"notification-sms-send\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-get-permission",
            "description": "Permission for GET scope on workflow-v3-process resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-post-permission",
            "description": "Permission for POST scope on workflow-v3-process resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-put-permission",
            "description": "Permission for PUT scope on workflow-v3-process resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-delete-permission",
            "description": "Permission for DELETE scope on workflow-v3-process resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-definition-get-permission",
            "description": "Permission for GET scope on workflow-v3-process-definition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process-definition\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-definition-post-permission",
            "description": "Permission for POST scope on workflow-v3-process-definition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process-definition\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-definition-put-permission",
            "description": "Permission for PUT scope on workflow-v3-process-definition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process-definition\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-definition-delete-permission",
            "description": "Permission for DELETE scope on workflow-v3-process-definition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process-definition\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-state-get-permission",
            "description": "Permission for GET scope on workflow-v3-process-state resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process-state\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-state-post-permission",
            "description": "Permission for POST scope on workflow-v3-process-state resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process-state\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-state-put-permission",
            "description": "Permission for PUT scope on workflow-v3-process-state resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process-state\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-process-state-delete-permission",
            "description": "Permission for DELETE scope on workflow-v3-process-state resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-process-state\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-state-get-permission",
            "description": "Permission for GET scope on workflow-v3-state resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-state\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-state-post-permission",
            "description": "Permission for POST scope on workflow-v3-state resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-state\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-state-put-permission",
            "description": "Permission for PUT scope on workflow-v3-state resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-state\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-state-delete-permission",
            "description": "Permission for DELETE scope on workflow-v3-state resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-state\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-action-get-permission",
            "description": "Permission for GET scope on workflow-v3-action resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-action\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-action-post-permission",
            "description": "Permission for POST scope on workflow-v3-action resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-action\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-action-put-permission",
            "description": "Permission for PUT scope on workflow-v3-action resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-action\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-action-delete-permission",
            "description": "Permission for DELETE scope on workflow-v3-action resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-action\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-transition-get-permission",
            "description": "Permission for GET scope on workflow-v3-transition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-transition\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-transition-post-permission",
            "description": "Permission for POST scope on workflow-v3-transition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-transition\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-transition-put-permission",
            "description": "Permission for PUT scope on workflow-v3-transition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-transition\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "workflow-v3-transition-delete-permission",
            "description": "Permission for DELETE scope on workflow-v3-transition resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"workflow-v3-transition\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "filestore-v1-files-upload-post-permission",
            "description": "Permission for POST scope on filestore-v1-files-upload-post resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"filestore-v1-files-upload-post\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "filestore-v1-files-download-urls-get-permission",
            "description": "Permission for GET scope on filestore-v1-files-download-urls-get resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"filestore-v1-files-download-urls-get\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "filestore-v1-files-upload-url-post-permission",
            "description": "Permission for POST scope on filestore-v1-files-upload-url-post resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"filestore-v1-files-upload-url-post\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "filestore-v1-files-confirm-upload-post-permission",
            "description": "Permission for POST scope on filestore-v1-files-confirm-upload-post resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"filestore-v1-files-confirm-upload-post\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "filestore-v1-files-tag-post-permission",
            "description": "Permission for POST scope on filestore-v1-files-tag-post resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"filestore-v1-files-tag-post\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "filestore-v1-files-metadata-post-permission",
            "description": "Permission for POST scope on filestore-v1-files-metadata-post resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"filestore-v1-files-metadata-post\"]",
              "scopes": "[\"post\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "filestore-v1-files-document-categories-get-permission",
            "description": "Permission for GET scope on filestore-v1-files-document-categories-get resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"filestore-v1-files-document-categories-get\"]",
              "scopes": "[\"get\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "filestore-v1-files-document-categories-put-permission",
            "description": "Permission for PUT scope on filestore-v1-files-document-categories-put resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"filestore-v1-files-document-categories-put\"]",
              "scopes": "[\"put\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          },
          {
            "name": "filestore-v1-files-document-categories-delete-permission",
            "description": "Permission for DELETE scope on filestore-v1-files-document-categories-delete resource",
            "type": "scope",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "resources": "[\"filestore-v1-files-document-categories-delete\"]",
              "scopes": "[\"delete\"]",
              "applyPolicies": "[\"keycloak-demo\"]"
            }
          }
        ],
        "scopes": [
          {
            "name": "post",
            "displayName": "POST",
            "iconUri": ""
          },
          {
            "name": "get",
            "displayName": "GET",
            "iconUri": ""
          },
          {
            "name": "put",
            "displayName": "PUT",
            "iconUri": ""
          },
          {
            "name": "delete",
            "displayName": "DELETE",
            "iconUri": ""
          }
        ],
        "decisionStrategy": "UNANIMOUS"
      }
    },
    {
      "clientId": "sandbox-ui-client",
      "name": "",
      "description": "",
      "rootUrl": "https://digit-lts.digit.org/sandbox-ui",
      "adminUrl": "",
      "baseUrl": "",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "redirectUris": [
        "https://digit-lts.digit.org/sandbox-ui/{{.TenantCode}}/employee/user/success",
        "https://digit-lts.digit.org/sandbox-ui/{{.TenantCode}}/citizen/success"
      ],
      "webOrigins": [
        "https://digit-lts.digit.org"
      ],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": true,
      "serviceAccountsEnabled": false,
      "publicClient": true,
      "frontchannelLogout": true,
      "protocol": "openid-connect",
      "attributes": {
        "oidc.ciba.grant.enabled": "false",
        "backchannel.logout.session.required": "true",
        "post.logout.redirect.uris": "https://digit-lts.digit.org/sandbox-ui/{{.TenantCode}}/employee/user/language-selection",
        "display.on.consent.screen": "false",
        "oauth2.device.authorization.grant.enabled": "false",
        "backchannel.logout.revoke.offline.tokens": "false"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": true,
      "nodeReRegistrationTimeout": -1,
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "profile",
        "roles",
        "basic",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    }
  ],
  "clientScopes": [
    {
      "name": "email",
      "description": "OpenID Connect built-in scope: email",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "consent.screen.text": "${emailScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "protocolMappers": [
        {
          "name": "email verified",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "emailVerified",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "email_verified",
            "jsonType.label": "boolean"
          }
        },
        {
          "name": "email",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "email",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "email",
            "jsonType.label": "String"
          }
        }
      ]
    },
    {
      "name": "phone",
      "description": "OpenID Connect built-in scope: phone",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "consent.screen.text": "${phoneScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "protocolMappers": [
        {
          "name": "phone number",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "phoneNumber",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "phone_number",
            "jsonType.label": "String"
          }
        },
        {
          "name": "phone number verified",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "phoneNumberVerified",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "phone_number_verified",
            "jsonType.label": "boolean"
          }
        }
      ]
    },
    {
      "name": "profile",
      "description": "OpenID Connect built-in scope: profile",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "consent.screen.text": "${profileScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "protocolMappers": [
        {
          "name": "birthdate",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "birthdate",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "birthdate",
            "jsonType.label": "String"
          }
        },
        {
          "name": "family name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "lastName",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "family_name",
            "jsonType.label": "String"
          }
        },
        {
          "name": "updated at",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "updatedAt",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "updated_at",
            "jsonType.label": "long"
          }
        },
        {
          "name": "profile",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "profile",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "profile",
            "jsonType.label": "String"
          }
        },
        {
          "name": "gender",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "gender",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "gender",
            "jsonType.label": "String"
          }
        },
        {
          "name": "locale",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "locale",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "locale",
            "jsonType.label": "String"
          }
        },
        {
          "name": "zoneinfo",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "zoneinfo",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "zoneinfo",
            "jsonType.label": "String"
          }
        },
        {
          "name": "full name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-full-name-mapper",
          "consentRequired": false,
          "config": {
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "access.token.claim": "true",
            "userinfo.token.claim": "true"
          }
        },
        {
          "name": "middle name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "middleName",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "middle_name",
            "jsonType.label": "String"
          }
        },
        {
          "name": "website",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "website",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "website",
            "jsonType.label": "String"
          }
        },
        {
          "name": "picture",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "picture",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "picture",
            "jsonType.label": "String"
          }
        },
        {
          "name": "nickname",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "nickname",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "nickname",
            "jsonType.label": "String"
          }
        },
        {
          "name": "username",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "username",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "preferred_username",
            "jsonType.label": "String"
          }
        },
        {
          "name": "given name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "firstName",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "given_name",
            "jsonType.label": "String"
          }
        }
      ]
    },
    {
      "name": "basic",
      "description": "OpenID Connect scope for add all basic claims to the token",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "false",
        "display.on.consent.screen": "false"
      },
      "protocolMappers": [
        {
          "name": "sub",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-sub-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "access.token.claim": "true"
          }
        },
        {
          "name": "auth_time",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "AUTH_TIME",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "auth_time",
            "jsonType.label": "long"
          }
        }
      ]
    },
    {
      "name": "role_list",
      "description": "SAML role list",
      "protocol": "saml",
      "attributes": {
        "consent.screen.text": "${samlRoleListScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "protocolMappers": [
        {
          "name": "role list",
          "protocol": "saml",
          "protocolMapper": "saml-role-list-mapper",
          "consentRequired": false,
          "config": {
            "single": "false",
            "attribute.nameformat": "Basic",
            "attribute.name": "Role"
          }
        }
      ]
    },
    {
      "name": "roles",
      "description": "OpenID Connect scope for add user roles to the access token",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "false",
        "consent.screen.text": "${rolesScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "protocolMappers": [
        {
          "name": "realm roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-realm-role-mapper",
          "consentRequired": false,
          "config": {
            "user.attribute": "foo",
            "introspection.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "realm_access.roles",
            "jsonType.label": "String",
            "multivalued": "true"
          }
        },
        {
          "name": "audience resolve",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-audience-resolve-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "access.token.claim": "true"
          }
        },
        {
          "name": "client roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-client-role-mapper",
          "consentRequired": false,
          "config": {
            "user.attribute": "foo",
            "introspection.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "resource_access.${client_id}.roles",
            "jsonType.label": "String",
            "multivalued": "true"
          }
        }
      ]
    },
    {
      "name": "microprofile-jwt",
      "description": "Microprofile - JWT built-in scope",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "false"
      },
      "protocolMappers": [
        {
          "name": "upn",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true",
            "user.attribute": "username",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "upn",
            "jsonType.label": "String"
          }
        },
        {
          "name": "groups",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-realm-role-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "multivalued": "true",
            "user.attribute": "foo",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "groups",
            "jsonType.label": "String"
          }
        }
      ]
    },
    {
      "name": "offline_access",
      "description": "OpenID Connect built-in scope: offline_access",
      "protocol": "openid-connect",
      "attributes": {
        "consent.screen.text": "${offlineAccessScopeConsentText}",
        "display.on.consent.screen": "true"
      }
    },
    {
      "name": "address",
      "description": "OpenID Connect built-in scope: address",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "consent.screen.text": "${addressScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "protocolMappers": [
        {
          "name": "address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-address-mapper",
          "consentRequired": false,
          "config": {
            "user.attribute.formatted": "formatted",
            "user.attribute.country": "country",
            "introspection.token.claim": "true",
            "user.attribute.postal_code": "postal_code",
            "userinfo.token.claim": "true",
            "user.attribute.street": "street",
            "id.token.claim": "true",
            "user.attribute.region": "region",
            "access.token.claim": "true",
            "user.attribute.locality": "locality"
          }
        }
      ]
    },
    {
      "name": "web-origins",
      "description": "OpenID Connect scope for add allowed web origins to the access token",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "false",
        "consent.screen.text": "",
        "display.on.consent.screen": "false"
      },
      "protocolMappers": [
        {
          "name": "allowed web origins",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-allowed-origins-mapper",
          "consentRequired": false,
          "config": {
            "introspection.token.claim": "true",
            "access.token.claim": "true"
          }
        }
      ]
    },
    {
      "name": "acr",
      "description": "OpenID Connect scope for add acr (authentication context class reference) to the token",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "false",
        "display.on.consent.screen": "false"
      },
      "protocolMappers": [
        {
          "name": "acr loa level",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-acr-mapper",
          "consentRequired": false,
          "config": {
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "access.token.claim": "true"
          }
        }
      ]
    }
  ],
  "defaultDefaultClientScopes": [
    "role_list",
    "profile",
    "email",
    "roles",
    "web-origins",
    "acr",
    "basic"
  ],
  "defaultOptionalClientScopes": [
    "offline_access",
    "address",
    "phone",
    "microprofile-jwt"
  ],
  "browserSecurityHeaders": {
    "contentSecurityPolicyReportOnly": "",
    "xContentTypeOptions": "nosniff",
    "referrerPolicy": "no-referrer",
    "xRobotsTag": "none",
    "xFrameOptions": "SAMEORIGIN",
    "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
    "xXSSProtection": "1; mode=block",
    "strictTransportSecurity": "max-age=31536000; includeSubDomains"
  },
  "smtpServer": {},
  "eventsEnabled": false,
  "eventsListeners": [
    "jboss-logging",
    "register-citizen-listener"
  ],
  "enabledEventTypes": [
    "UPDATE_CONSENT_ERROR",
    "SEND_RESET_PASSWORD",
    "GRANT_CONSENT",
    "VERIFY_PROFILE_ERROR",
    "UPDATE_TOTP",
    "REMOVE_TOTP",
    "REVOKE_GRANT",
    "LOGIN_ERROR",
    "CLIENT_LOGIN",
    "RESET_PASSWORD_ERROR",
    "IMPERSONATE_ERROR",
    "CODE_TO_TOKEN_ERROR",
    "CUSTOM_REQUIRED_ACTION",
    "OAUTH2_DEVICE_CODE_TO_TOKEN_ERROR",
    "RESTART_AUTHENTICATION",
    "UPDATE_PROFILE_ERROR",
    "IMPERSONATE",
    "LOGIN",
    "UPDATE_PASSWORD_ERROR",
    "OAUTH2_DEVICE_VERIFY_USER_CODE",
    "CLIENT_INITIATED_ACCOUNT_LINKING",
    "USER_DISABLED_BY_PERMANENT_LOCKOUT",
    "OAUTH2_EXTENSION_GRANT",
    "TOKEN_EXCHANGE",
    "REGISTER",
    "LOGOUT",
    "AUTHREQID_TO_TOKEN",
    "DELETE_ACCOUNT_ERROR",
    "CLIENT_REGISTER",
    "IDENTITY_PROVIDER_LINK_ACCOUNT",
    "USER_DISABLED_BY_TEMPORARY_LOCKOUT",
    "UPDATE_PASSWORD",
    "DELETE_ACCOUNT",
    "FEDERATED_IDENTITY_LINK_ERROR",
    "CLIENT_DELETE",
    "IDENTITY_PROVIDER_FIRST_LOGIN",
    "VERIFY_EMAIL",
    "CLIENT_DELETE_ERROR",
    "CLIENT_LOGIN_ERROR",
    "RESTART_AUTHENTICATION_ERROR",
    "REMOVE_FEDERATED_IDENTITY_ERROR",
    "EXECUTE_ACTIONS",
    "TOKEN_EXCHANGE_ERROR",
    "PERMISSION_TOKEN",
    "FEDERATED_IDENTITY_OVERRIDE_LINK",
    "SEND_IDENTITY_PROVIDER_LINK_ERROR",
    "EXECUTE_ACTION_TOKEN_ERROR",
    "SEND_VERIFY_EMAIL",
    "OAUTH2_EXTENSION_GRANT_ERROR",
    "OAUTH2_DEVICE_AUTH",
    "EXECUTE_ACTIONS_ERROR",
    "REMOVE_FEDERATED_IDENTITY",
    "OAUTH2_DEVICE_CODE_TO_TOKEN",
    "IDENTITY_PROVIDER_POST_LOGIN",
    "IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR",
    "FEDERATED_IDENTITY_OVERRIDE_LINK_ERROR",
    "UPDATE_EMAIL",
    "OAUTH2_DEVICE_VERIFY_USER_CODE_ERROR",
    "REGISTER_ERROR",
    "REVOKE_GRANT_ERROR",
    "LOGOUT_ERROR",
    "UPDATE_EMAIL_ERROR",
    "EXECUTE_ACTION_TOKEN",
    "CLIENT_UPDATE_ERROR",
    "UPDATE_PROFILE",
    "AUTHREQID_TO_TOKEN_ERROR",
    "INVITE_ORG_ERROR",
    "FEDERATED_IDENTITY_LINK",
    "CLIENT_REGISTER_ERROR",
    "INVITE_ORG",
    "SEND_VERIFY_EMAIL_ERROR",
    "SEND_IDENTITY_PROVIDER_LINK",
    "RESET_PASSWORD",
    "CLIENT_INITIATED_ACCOUNT_LINKING_ERROR",
    "OAUTH2_DEVICE_AUTH_ERROR",
    "UPDATE_CONSENT",
    "REMOVE_TOTP_ERROR",
    "VERIFY_EMAIL_ERROR",
    "SEND_RESET_PASSWORD_ERROR",
    "CLIENT_UPDATE",
    "IDENTITY_PROVIDER_POST_LOGIN_ERROR",
    "CUSTOM_REQUIRED_ACTION_ERROR",
    "UPDATE_TOTP_ERROR",
    "CODE_TO_TOKEN",
    "VERIFY_PROFILE",
    "GRANT_CONSENT_ERROR",
    "IDENTITY_PROVIDER_FIRST_LOGIN_ERROR"
  ],
  "adminEventsEnabled": false,
  "adminEventsDetailsEnabled": false,
  "identityProviders": [],
  "identityProviderMappers": [],
  "components": {
    "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
      {
        "name": "Trusted Hosts",
        "providerId": "trusted-hosts",
        "subType": "anonymous",
        "subComponents": {},
        "config": {
          "host-sending-registration-request-must-match": [
            "true"
          ],
          "client-uris-must-match": [
            "true"
          ]
        }
      },
      {
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subType": "authenticated",
        "subComponents": {},
        "config": {
          "allowed-protocol-mapper-types": [
            "oidc-usermodel-attribute-mapper",
            "oidc-address-mapper",
            "saml-user-attribute-mapper",
            "oidc-usermodel-property-mapper",
            "saml-user-property-mapper",
            "oidc-full-name-mapper",
            "saml-role-list-mapper",
            "oidc-sha256-pairwise-sub-mapper"
          ]
        }
      },
      {
        "name": "Full Scope Disabled",
        "providerId": "scope",
        "subType": "anonymous",
        "subComponents": {},
        "config": {}
      },
      {
        "name": "Consent Required",
        "providerId": "consent-required",
        "subType": "anonymous",
        "subComponents": {},
        "config": {}
      },
      {
        "name": "Max Clients Limit",
        "providerId": "max-clients",
        "subType": "anonymous",
        "subComponents": {},
        "config": {
          "max-clients": [
            "200"
          ]
        }
      },
      {
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subType": "anonymous",
        "subComponents": {},
        "config": {
          "allowed-protocol-mapper-types": [
            "saml-user-attribute-mapper",
            "saml-role-list-mapper",
            "oidc-sha256-pairwise-sub-mapper",
            "oidc-usermodel-attribute-mapper",
            "saml-user-property-mapper",
            "oidc-full-name-mapper",
            "oidc-address-mapper",
            "oidc-usermodel-property-mapper"
          ]
        }
      },
      {
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subType": "anonymous",
        "subComponents": {},
        "config": {
          "allow-default-scopes": [
            "true"
          ]
        }
      },
      {
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subType": "authenticated",
        "subComponents": {},
        "config": {
          "allow-default-scopes": [
            "true"
          ]
        }
      }
    ],
    "org.keycloak.userprofile.UserProfileProvider": [
      {
        "providerId": "declarative-user-profile",
        "subComponents": {},
        "config": {
          "kc.user.profile.config": [
            "{\"attributes\":[{\"name\":\"username\",\"displayName\":\"${username}\",\"validations\":{\"length\":{\"min\":3,\"max\":255},\"username-prohibited-characters\":{},\"up-username-not-idn-homograph\":{}},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"email\",\"displayName\":\"${email}\",\"validations\":{\"email\":{},\"length\":{\"max\":255}},\"annotations\":{},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"firstName\",\"displayName\":\"${firstName}\",\"validations\":{\"length\":{\"max\":255},\"person-name-prohibited-characters\":{}},\"annotations\":{},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"lastName\",\"displayName\":\"${lastName}\",\"validations\":{\"length\":{\"max\":255},\"person-name-prohibited-characters\":{}},\"annotations\":{},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"mobileNumber\",\"displayName\":\"${mobileNumber}\",\"validations\":{},\"annotations\":{},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false}],\"groups\":[{\"name\":\"user-metadata\",\"displayHeader\":\"User metadata\",\"displayDescription\":\"Attributes, which refer to user metadata\"}]}"
          ]
        }
      }
    ],
    "org.keycloak.keys.KeyProvider": [
      {
        "name": "aes-generated",
        "providerId": "aes-generated",
        "subComponents": {},
        "config": {
          "priority": [
            "100"
          ]
        }
      },
      {
        "name": "rsa-generated",
        "providerId": "rsa-generated",
        "subComponents": {},
        "config": {
          "priority": [
            "100"
          ]
        }
      },
      {
        "name": "hmac-generated-hs512",
        "providerId": "hmac-generated",
        "subComponents": {},
        "config": {
          "priority": [
            "100"
          ],
          "algorithm": [
            "HS512"
          ]
        }
      },
      {
        "name": "rsa-enc-generated",
        "providerId": "rsa-enc-generated",
        "subComponents": {},
        "config": {
          "priority": [
            "100"
          ],
          "algorithm": [
            "RSA-OAEP"
          ]
        }
      }
    ]
  },
  "internationalizationEnabled": false,
  "supportedLocales": [],
  "authenticationFlows": [
    {
      "alias": "Account verification options",
      "description": "Method with which to verity the existing account",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "idp-email-verification",
          "authenticatorFlow": false,
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "ALTERNATIVE",
          "priority": 20,
          "autheticatorFlow": true,
          "flowAlias": "Verify Existing Account by Re-authentication",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "Browser - Conditional OTP",
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-otp-form",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 20,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "Citizen Flow",
      "description": "",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": false,
      "authenticationExecutions": [
        {
          "authenticatorConfig": "Citizen Login",
          "authenticator": "conditional-user-role",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 0,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "sms-authenticator",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 1,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "Copy of browser",
      "description": "browser based authentication",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": false,
      "authenticationExecutions": [
        {
          "authenticator": "auth-cookie",
          "authenticatorFlow": false,
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-spnego",
          "authenticatorFlow": false,
          "requirement": "DISABLED",
          "priority": 20,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "identity-provider-redirector",
          "authenticatorFlow": false,
          "requirement": "ALTERNATIVE",
          "priority": 25,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "ALTERNATIVE",
          "priority": 30,
          "autheticatorFlow": true,
          "flowAlias": "Copy of browser forms",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "Copy of browser forms",
      "description": "Username, password, otp and other auth forms.",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": false,
      "authenticationExecutions": [
        {
          "authenticator": "auth-username-form",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 11,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "CONDITIONAL",
          "priority": 12,
          "autheticatorFlow": true,
          "flowAlias": "Employee Flow",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "CONDITIONAL",
          "priority": 13,
          "autheticatorFlow": true,
          "flowAlias": "Citizen Flow",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "Direct Grant - Conditional OTP",
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "direct-grant-validate-otp",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 20,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "Employee Flow",
      "description": "",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": false,
      "authenticationExecutions": [
        {
          "authenticatorConfig": "Employee Login",
          "authenticator": "conditional-user-role",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 0,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "email-authenticator",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 1,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "First broker login - Conditional OTP",
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-otp-form",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 20,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "Handle Existing Account",
      "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "idp-confirm-link",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "REQUIRED",
          "priority": 20,
          "autheticatorFlow": true,
          "flowAlias": "Account verification options",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "Reset - Conditional OTP",
      "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-otp",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 20,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "User creation or linking",
      "description": "Flow for the existing/non-existing user alternatives",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticatorConfig": "create unique user config",
          "authenticator": "idp-create-user-if-unique",
          "authenticatorFlow": false,
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "ALTERNATIVE",
          "priority": 20,
          "autheticatorFlow": true,
          "flowAlias": "Handle Existing Account",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "Verify Existing Account by Re-authentication",
      "description": "Reauthentication of existing account",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "idp-username-password-form",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "CONDITIONAL",
          "priority": 20,
          "autheticatorFlow": true,
          "flowAlias": "First broker login - Conditional OTP",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "browser",
      "description": "browser based authentication",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "auth-cookie",
          "authenticatorFlow": false,
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-spnego",
          "authenticatorFlow": false,
          "requirement": "DISABLED",
          "priority": 20,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "identity-provider-redirector",
          "authenticatorFlow": false,
          "requirement": "ALTERNATIVE",
          "priority": 25,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "ALTERNATIVE",
          "priority": 30,
          "autheticatorFlow": true,
          "flowAlias": "forms",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "clients",
      "description": "Base authentication for clients",
      "providerId": "client-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "client-secret",
          "authenticatorFlow": false,
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-jwt",
          "authenticatorFlow": false,
          "requirement": "ALTERNATIVE",
          "priority": 20,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-secret-jwt",
          "authenticatorFlow": false,
          "requirement": "ALTERNATIVE",
          "priority": 30,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-x509",
          "authenticatorFlow": false,
          "requirement": "ALTERNATIVE",
          "priority": 40,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "direct grant",
      "description": "OpenID Connect Resource Owner Grant",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "direct-grant-validate-username",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "direct-grant-validate-password",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 20,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "CONDITIONAL",
          "priority": 30,
          "autheticatorFlow": true,
          "flowAlias": "Direct Grant - Conditional OTP",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "docker auth",
      "description": "Used by Docker clients to authenticate against the IDP",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "docker-http-basic-authenticator",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "first broker login",
      "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticatorConfig": "review profile config",
          "authenticator": "idp-review-profile",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "REQUIRED",
          "priority": 20,
          "autheticatorFlow": true,
          "flowAlias": "User creation or linking",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "forms",
      "description": "Username, password, otp and other auth forms.",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "auth-username-password-form",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "CONDITIONAL",
          "priority": 20,
          "autheticatorFlow": true,
          "flowAlias": "Browser - Conditional OTP",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "registration",
      "description": "registration flow",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "registration-page-form",
          "authenticatorFlow": true,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": true,
          "flowAlias": "registration form",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "registration form",
      "description": "registration form",
      "providerId": "form-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "registration-user-creation",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 20,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-password-action",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 50,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-recaptcha-action",
          "authenticatorFlow": false,
          "requirement": "DISABLED",
          "priority": 60,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-terms-and-conditions",
          "authenticatorFlow": false,
          "requirement": "DISABLED",
          "priority": 70,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "reset credentials",
      "description": "Reset credentials for a user if they forgot their password or something",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "reset-credentials-choose-user",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-credential-email",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 20,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-password",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 30,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "requirement": "CONDITIONAL",
          "priority": 40,
          "autheticatorFlow": true,
          "flowAlias": "Reset - Conditional OTP",
          "userSetupAllowed": false
        }
      ]
    },
    {
      "alias": "saml ecp",
      "description": "SAML ECP Profile Authentication Flow",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "http-basic-authenticator",
          "authenticatorFlow": false,
          "requirement": "REQUIRED",
          "priority": 10,
          "autheticatorFlow": false,
          "userSetupAllowed": false
        }
      ]
    }
  ],
  "authenticatorConfig": [
    {
      "alias": "Citizen Login",
      "config": {
        "condUserRole": "CITIZEN"
      }
    },
    {
      "alias": "Employee Login",
      "config": {
        "condUserRole": "CITIZEN",
        "negate": "true"
      }
    },
    {
      "alias": "create unique user config",
      "config": {
        "require.password.update.after.registration": "false"
      }
    },
    {
      "alias": "review profile config",
      "config": {
        "update.profile.on.first.login": "missing"
      }
    }
  ],
  "requiredActions": [
    {
      "alias": "CONFIGURE_TOTP",
      "name": "Configure OTP",
      "providerId": "CONFIGURE_TOTP",
      "enabled": true,
      "defaultAction": false,
      "priority": 10,
      "config": {}
    },
    {
      "alias": "TERMS_AND_CONDITIONS",
      "name": "Terms and Conditions",
      "providerId": "TERMS_AND_CONDITIONS",
      "enabled": false,
      "defaultAction": false,
      "priority": 20,
      "config": {}
    },
    {
      "alias": "UPDATE_PASSWORD",
      "name": "Update Password",
      "providerId": "UPDATE_PASSWORD",
      "enabled": true,
      "defaultAction": false,
      "priority": 30,
      "config": {}
    },
    {
      "alias": "UPDATE_PROFILE",
      "name": "Update Profile",
      "providerId": "UPDATE_PROFILE",
      "enabled": true,
      "defaultAction": false,
      "priority": 40,
      "config": {}
    },
    {
      "alias": "VERIFY_EMAIL",
      "name": "Verify Email",
      "providerId": "VERIFY_EMAIL",
      "enabled": true,
      "defaultAction": false,
      "priority": 50,
      "config": {}
    },
    {
      "alias": "delete_account",
      "name": "Delete Account",
      "providerId": "delete_account",
      "enabled": false,
      "defaultAction": false,
      "priority": 60,
      "config": {}
    },
    {
      "alias": "webauthn-register",
      "name": "Webauthn Register",
      "providerId": "webauthn-register",
      "enabled": true,
      "defaultAction": false,
      "priority": 70,
      "config": {}
    },
    {
      "alias": "webauthn-register-passwordless",
      "name": "Webauthn Register Passwordless",
      "providerId": "webauthn-register-passwordless",
      "enabled": true,
      "defaultAction": false,
      "priority": 80,
      "config": {}
    },
    {
      "alias": "VERIFY_PROFILE",
      "name": "Verify Profile",
      "providerId": "VERIFY_PROFILE",
      "enabled": true,
      "defaultAction": false,
      "priority": 90,
      "config": {}
    },
    {
      "alias": "delete_credential",
      "name": "Delete Credential",
      "providerId": "delete_credential",
      "enabled": true,
      "defaultAction": false,
      "priority": 100,
      "config": {}
    },
    {
      "alias": "update_user_locale",
      "name": "Update User Locale",
      "providerId": "update_user_locale",
      "enabled": true,
      "defaultAction": false,
      "priority": 1000,
      "config": {}
    }
  ],
  "browserFlow": "Copy of browser",
  "registrationFlow": "registration",
  "directGrantFlow": "direct grant",
  "resetCredentialsFlow": "reset credentials",
  "clientAuthenticationFlow": "clients",
  "dockerAuthenticationFlow": "docker auth",
  "firstBrokerLoginFlow": "first broker login",
  "attributes": {
    "cibaBackchannelTokenDeliveryMode": "poll",
    "cibaAuthRequestedUserHint": "login_hint",
    "oauth2DevicePollingInterval": "5",
    "clientOfflineSessionMaxLifespan": "0",
    "clientSessionIdleTimeout": "0",
    "clientOfflineSessionIdleTimeout": "0",
    "cibaInterval": "5",
    "realmReusableOtpCode": "false",
    "cibaExpiresIn": "120",
    "oauth2DeviceCodeLifespan": "600",
    "parRequestUriLifespan": "60",
    "clientSessionMaxLifespan": "0",
    "organizationsEnabled": "false"
  },
  "keycloakVersion": "25.0.1",
  "userManagedAccessAllowed": false,
  "organizationsEnabled": false,
  "clientProfiles": {
    "profiles": []
  },
  "clientPolicies": {
    "policies": []
  }
}