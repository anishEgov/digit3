{
  "info": {
    "name": "Kong Gateway LoadBalancer API Collection",
    "description": "Complete collection for testing Kong Gateway with dedicated AWS LoadBalancer, including all plugins and endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0",
    "_postman_id": "kong-loadbalancer-collection"
  },
  "variable": [
    {
      "key": "kong_admin_url",
      "value": "http://a45c9b6eef39d4d2bb5190653f61a8f8-5b955ff40d429f1f.elb.ap-south-1.amazonaws.com:8001",
      "type": "string",
      "description": "Kong Admin API (via LoadBalancer direct access)"
    },
    {
      "key": "kong_loadbalancer_url",
      "value": "http://a45c9b6eef39d4d2bb5190653f61a8f8-5b955ff40d429f1f.elb.ap-south-1.amazonaws.com",
      "type": "string",
      "description": "Kong Gateway via dedicated AWS LoadBalancer"
    },
    {
      "key": "keycloak_url",
      "value": "http://localhost:8007/keycloak-test",
      "type": "string",
      "description": "Keycloak server (via port-forward)"
    },
    {
      "key": "host_header",
      "value": "digit-lts.digit.org",
      "type": "string",
      "description": "Host header for routing"
    },
    {
      "key": "ACCESS_TOKEN",
      "value": "",
      "type": "string",
      "description": "Keycloak admin token"
    },
    {
      "key": "JWT_TOKEN",
      "value": "",
      "type": "string",
      "description": "User JWT token for API calls"
    },
    {
      "key": "SERVICE_ID",
      "value": "",
      "type": "string",
      "description": "Kong service ID"
    },
    {
      "key": "ROUTE_ID",
      "value": "",
      "type": "string",
      "description": "Kong route ID"
    },
    {
      "key": "NEW_SERVICE_ID",
      "value": "",
      "type": "string",
      "description": "ID of newly created service"
    },
    {
      "key": "NEW_SERVICE_NAME",
      "value": "",
      "type": "string",
      "description": "Name of newly created service"
    },
    {
      "key": "NEW_ROUTE_ID",
      "value": "",
      "type": "string",
      "description": "ID of newly created route"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{JWT_TOKEN}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "0. Setup & Authentication",
      "item": [
        {
          "name": "Get Keycloak Admin Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "digit",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "digit@321",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "admin-cli",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{keycloak_url}}/realms/master/protocol/openid-connect/token",
              "host": ["{{keycloak_url}}"],
              "path": ["realms", "master", "protocol", "openid-connect", "token"]
            },
            "description": "Get admin token for Keycloak operations"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('ACCESS_TOKEN', response.access_token);",
                  "    console.log('Admin token acquired');",
                  "} else {",
                  "    console.log('Failed to get admin token');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get User JWT Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "demousercamunda@gmail.com",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "password123",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "kong-test-client",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{keycloak_url}}/realms/DEMOUSERCAMUNDA/protocol/openid-connect/token",
              "host": ["{{keycloak_url}}"],
              "path": ["realms", "DEMOUSERCAMUNDA", "protocol", "openid-connect", "token"]
            },
            "description": "Get JWT token for API authentication"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('JWT_TOKEN', response.access_token);",
                  "    console.log('JWT token acquired: ' + response.access_token.substring(0, 50) + '...');",
                  "} else {",
                  "    console.log('Failed to get JWT token');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Authentication setup for Keycloak and Kong"
    },
    {
      "name": "1. Kong Admin API",
      "item": [
        {
          "name": "Kong Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{kong_admin_url}}/status",
              "host": ["{{kong_admin_url}}"],
              "path": ["status"]
            },
            "description": "Check Kong Gateway health"
          },
          "response": []
        },
        {
          "name": "List Services",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{kong_admin_url}}/services",
              "host": ["{{kong_admin_url}}"],
              "path": ["services"]
            },
            "description": "List all Kong services"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.length > 0) {",
                  "        pm.collectionVariables.set('SERVICE_ID', response.data[0].id);",
                  "        console.log('Service ID set: ' + response.data[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "List Routes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{kong_admin_url}}/routes",
              "host": ["{{kong_admin_url}}"],
              "path": ["routes"]
            },
            "description": "List all Kong routes"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.length > 0) {",
                  "        pm.collectionVariables.set('ROUTE_ID', response.data[0].id);",
                  "        console.log('Route ID set: ' + response.data[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "List Plugins",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{kong_admin_url}}/plugins",
              "host": ["{{kong_admin_url}}"],
              "path": ["plugins"]
            },
            "description": "List all Kong plugins"
          },
          "response": []
        },
        {
          "name": "Create New Service",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"my-new-service\",\n  \"protocol\": \"http\",\n  \"host\": \"httpbin.org\",\n  \"port\": 80,\n  \"path\": \"/anything\",\n  \"retries\": 5,\n  \"connect_timeout\": 60000,\n  \"write_timeout\": 60000,\n  \"read_timeout\": 60000\n}"
            },
            "url": {
              "raw": "{{kong_admin_url}}/services",
              "host": ["{{kong_admin_url}}"],
              "path": ["services"]
            },
            "description": "Create a new service in Kong Gateway"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('NEW_SERVICE_ID', response.id);",
                  "    pm.collectionVariables.set('NEW_SERVICE_NAME', response.name);",
                  "    console.log('New Service created - ID: ' + response.id + ', Name: ' + response.name);",
                  "    pm.test('Service created successfully', function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(response.name).to.eql('my-new-service');",
                  "    });",
                  "} else {",
                  "    console.log('Failed to create service: ' + pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Route for New Service",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"my-new-route\",\n  \"paths\": [\"/my-new-service\"],\n  \"methods\": [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n  \"hosts\": [\"{{host_header}}\"],\n  \"strip_path\": true,\n  \"preserve_host\": false,\n  \"service\": {\n    \"id\": \"{{NEW_SERVICE_ID}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{kong_admin_url}}/routes",
              "host": ["{{kong_admin_url}}"],
              "path": ["routes"]
            },
            "description": "Create a route for the new service"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('NEW_ROUTE_ID', response.id);",
                  "    console.log('New Route created - ID: ' + response.id + ', Paths: ' + response.paths);",
                  "    pm.test('Route created successfully', function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(response.paths).to.include('/my-new-service');",
                  "    });",
                  "} else {",
                  "    console.log('Failed to create route: ' + pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Add Dynamic JWT Plugin to New Service",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"dynamic-jwt\",\n  \"service\": {\n    \"id\": \"{{NEW_SERVICE_ID}}\"\n  },\n  \"config\": {\n    \"keycloak_base_url\": \"http://keycloak.keycloak.svc.cluster.local:8080/keycloak-test\"\n  }\n}"
            },
            "url": {
              "raw": "{{kong_admin_url}}/plugins",
              "host": ["{{kong_admin_url}}"],
              "path": ["plugins"]
            },
            "description": "Add dynamic JWT authentication to the new service"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('Dynamic JWT plugin added to service - Plugin ID: ' + response.id);",
                  "    pm.test('Dynamic JWT plugin added successfully', function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(response.name).to.eql('dynamic-jwt');",
                  "    });",
                  "} else {",
                  "    console.log('Failed to add plugin: ' + pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Add Rate Limiting Plugin to New Service",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"rate-limiting\",\n  \"service\": {\n    \"id\": \"{{NEW_SERVICE_ID}}\"\n  },\n  \"config\": {\n    \"minute\": 50,\n    \"hour\": 1000,\n    \"day\": 10000,\n    \"policy\": \"local\",\n    \"limit_by\": \"ip\",\n    \"hide_client_headers\": false\n  }\n}"
            },
            "url": {
              "raw": "{{kong_admin_url}}/plugins",
              "host": ["{{kong_admin_url}}"],
              "path": ["plugins"]
            },
            "description": "Add rate limiting to the new service"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('Rate limiting plugin added to service - Plugin ID: ' + response.id);",
                  "    pm.test('Rate limiting plugin added successfully', function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(response.name).to.eql('rate-limiting');",
                  "    });",
                  "} else {",
                  "    console.log('Failed to add rate limiting plugin: ' + pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Service Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{kong_admin_url}}/services/{{NEW_SERVICE_ID}}",
              "host": ["{{kong_admin_url}}"],
              "path": ["services", "{{NEW_SERVICE_ID}}"]
            },
            "description": "Get details of the newly created service"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('Service Details: ' + JSON.stringify(response, null, 2));",
                  "    pm.test('Service exists and accessible', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(response.id).to.eql(pm.collectionVariables.get('NEW_SERVICE_ID'));",
                  "    });",
                  "} else {",
                  "    console.log('Failed to get service details: ' + pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Service Configuration",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"connect_timeout\": 30000,\n  \"write_timeout\": 30000,\n  \"read_timeout\": 30000,\n  \"retries\": 3\n}"
            },
            "url": {
              "raw": "{{kong_admin_url}}/services/{{NEW_SERVICE_ID}}",
              "host": ["{{kong_admin_url}}"],
              "path": ["services", "{{NEW_SERVICE_ID}}"]
            },
            "description": "Update service timeout and retry settings"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('Service updated successfully');",
                  "    pm.test('Service updated successfully', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(response.connect_timeout).to.eql(30000);",
                  "        pm.expect(response.retries).to.eql(3);",
                  "    });",
                  "} else {",
                  "    console.log('Failed to update service: ' + pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Service (Cleanup)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{kong_admin_url}}/services/{{NEW_SERVICE_ID}}",
              "host": ["{{kong_admin_url}}"],
              "path": ["services", "{{NEW_SERVICE_ID}}"]
            },
            "description": "Delete the newly created service (cleanup)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 204) {",
                  "    console.log('Service deleted successfully');",
                  "    pm.test('Service deleted successfully', function () {",
                  "        pm.response.to.have.status(204);",
                  "    });",
                  "    // Clear the variables",
                  "    pm.collectionVariables.unset('NEW_SERVICE_ID');",
                  "    pm.collectionVariables.unset('NEW_SERVICE_NAME');",
                  "    pm.collectionVariables.unset('NEW_ROUTE_ID');",
                  "} else {",
                  "    console.log('Failed to delete service: ' + pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Kong Admin API operations"
    },
    {
      "name": "2. Authentication Tests",
      "item": [
        {
          "name": "Test No Token (Should Fail)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/localization/v1/_search?locale=en_IN&tenantId=pb",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["localization", "v1", "_search"],
              "query": [
                {
                  "key": "locale",
                  "value": "en_IN"
                },
                {
                  "key": "tenantId",
                  "value": "pb"
                }
              ]
            },
            "description": "Test access without JWT token - should return 401"
          },
          "response": []
        },
        {
          "name": "Test Invalid Token (Should Fail)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer invalid.token.here"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/localization/v1/_search?locale=en_IN&tenantId=pb",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["localization", "v1", "_search"],
              "query": [
                {
                  "key": "locale",
                  "value": "en_IN"
                },
                {
                  "key": "tenantId",
                  "value": "pb"
                }
              ]
            },
            "description": "Test access with invalid JWT token - should return 401"
          },
          "response": []
        },
        {
          "name": "Test Valid Token (Should Pass)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/localization/v1/_search?locale=en_IN&tenantId=pb",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["localization", "v1", "_search"],
              "query": [
                {
                  "key": "locale",
                  "value": "en_IN"
                },
                {
                  "key": "tenantId",
                  "value": "pb"
                }
              ]
            },
            "description": "Test access with valid JWT token - should return 200 or appropriate response"
          },
          "response": []
        }
      ],
      "description": "JWT authentication testing"
    },
    {
      "name": "3. Plugin Functionality Tests",
      "item": [
        {
          "name": "Test Rate Limiting",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/localization/v1/_search?locale=en_IN&tenantId=pb",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["localization", "v1", "_search"],
              "query": [
                {
                  "key": "locale",
                  "value": "en_IN"
                },
                {
                  "key": "tenantId",
                  "value": "pb"
                }
              ]
            },
            "description": "Check rate limiting headers in response"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Rate limiting headers present', function () {",
                  "    pm.expect(pm.response.headers.has('X-RateLimit-Limit-Minute')).to.be.true;",
                  "    pm.expect(pm.response.headers.has('X-RateLimit-Remaining-Minute')).to.be.true;",
                  "});",
                  "",
                  "console.log('Rate Limit Headers:');",
                  "console.log('Minute Limit: ' + pm.response.headers.get('X-RateLimit-Limit-Minute'));",
                  "console.log('Minute Remaining: ' + pm.response.headers.get('X-RateLimit-Remaining-Minute'));",
                  "console.log('Hour Limit: ' + pm.response.headers.get('X-RateLimit-Limit-Hour'));",
                  "console.log('Hour Remaining: ' + pm.response.headers.get('X-RateLimit-Remaining-Hour'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Test Header Enrichment",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/localization/v1/_search?locale=en_IN&tenantId=pb",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["localization", "v1", "_search"],
              "query": [
                {
                  "key": "locale",
                  "value": "en_IN"
                },
                {
                  "key": "tenantId",
                  "value": "pb"
                }
              ]
            },
            "description": "Check tenant header enrichment"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tenant header enrichment working', function () {",
                  "    pm.expect(pm.response.headers.has('X-Tenant-ID')).to.be.true;",
                  "});",
                  "",
                  "console.log('Header Enrichment:');",
                  "console.log('Tenant ID: ' + pm.response.headers.get('X-Tenant-ID'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Test OpenTelemetry Tracing",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/localization/v1/_search?locale=en_IN&tenantId=pb",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["localization", "v1", "_search"],
              "query": [
                {
                  "key": "locale",
                  "value": "en_IN"
                },
                {
                  "key": "tenantId",
                  "value": "pb"
                }
              ]
            },
            "description": "Check OpenTelemetry trace ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('OpenTelemetry trace ID present', function () {",
                  "    pm.expect(pm.response.headers.has('X-Trace-Id')).to.be.true;",
                  "});",
                  "",
                  "pm.test('Kong request ID present', function () {",
                  "    pm.expect(pm.response.headers.has('X-Kong-Request-Id')).to.be.true;",
                  "});",
                  "",
                  "console.log('Tracing Headers:');",
                  "console.log('Trace ID: ' + pm.response.headers.get('X-Trace-Id'));",
                  "console.log('Kong Request ID: ' + pm.response.headers.get('X-Kong-Request-Id'));",
                  "console.log('Via: ' + pm.response.headers.get('Via'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Kong plugin functionality tests"
    },
    {
      "name": "4. Localization Service Tests",
      "item": [
        {
          "name": "Search Localization Messages",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/localization/v1/_search?locale=en_IN&tenantId=pb&module=rainmaker-pgr",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["localization", "v1", "_search"],
              "query": [
                {
                  "key": "locale",
                  "value": "en_IN"
                },
                {
                  "key": "tenantId",
                  "value": "pb"
                },
                {
                  "key": "module",
                  "value": "rainmaker-pgr"
                }
              ]
            },
            "description": "Search for localization messages"
          },
          "response": []
        },
        {
          "name": "Upsert Localization Messages",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"RequestInfo\": {\n        \"apiId\": \"emp\",\n        \"ver\": \"1.0\",\n        \"action\": \"create\",\n        \"did\": \"1\",\n        \"key\": \"abcdkey\",\n        \"msgId\": \"20170310130900\",\n        \"requesterId\": \"rajesh\",\n        \"authToken\": \"0cfe07e1-94b5-4f50-a7a0-c7c186feb9d5\",\n        \"userInfo\": {\n            \"id\": 128\n        }\n    },\n    \"tenantId\": \"DEFAULT\",\n    \"messages\": [\n        {\n            \"code\": \"TestFromPostman\",\n            \"message\": \"Test Message From Postman Collection\",\n            \"module\": \"digit-ui\",\n            \"locale\": \"en_IN\"\n        },\n        {\n            \"code\": \"LoadBalancerTest\",\n            \"message\": \"Kong Gateway LoadBalancer Test\",\n            \"module\": \"digit-ui\",\n            \"locale\": \"en_IN\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{kong_loadbalancer_url}}/localization/messages/v1/_upsert",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["localization", "messages", "v1", "_upsert"]
            },
            "description": "Create/update localization messages"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains messages', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "});",
                  "",
                  "console.log('Upsert Response:', JSON.stringify(pm.response.json(), null, 2));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Test localization service endpoints through Kong Gateway"
    },
    {
      "name": "5. Performance & Monitoring",
      "item": [
        {
          "name": "Performance Test - Multiple Requests",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/localization/v1/_search?locale=en_IN&tenantId=pb",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["localization", "v1", "_search"],
              "query": [
                {
                  "key": "locale",
                  "value": "en_IN"
                },
                {
                  "key": "tenantId",
                  "value": "pb"
                }
              ]
            },
            "description": "Test Kong Gateway performance and response times"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "console.log('Performance Metrics:');",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  "console.log('Kong Proxy Latency: ' + pm.response.headers.get('X-Kong-Proxy-Latency') + 'ms');",
                  "console.log('Kong Upstream Latency: ' + pm.response.headers.get('X-Kong-Upstream-Latency') + 'ms');",
                  "console.log('Total Response Time: ' + pm.response.headers.get('X-Response-Time'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check All Headers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/localization/v1/_search?locale=en_IN&tenantId=pb",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["localization", "v1", "_search"],
              "query": [
                {
                  "key": "locale",
                  "value": "en_IN"
                },
                {
                  "key": "tenantId",
                  "value": "pb"
                }
              ]
            },
            "description": "Comprehensive header analysis"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== COMPLETE HEADER ANALYSIS ===');",
                  "",
                  "// Authentication Headers",
                  "console.log('Authentication:');",
                  "console.log('- JWT processed by dynamic-jwt plugin');",
                  "",
                  "// Rate Limiting Headers",
                  "console.log('Rate Limiting:');",
                  "console.log('- Minute Limit: ' + pm.response.headers.get('X-RateLimit-Limit-Minute'));",
                  "console.log('- Minute Remaining: ' + pm.response.headers.get('X-RateLimit-Remaining-Minute'));",
                  "console.log('- Hour Limit: ' + pm.response.headers.get('X-RateLimit-Limit-Hour'));",
                  "console.log('- Hour Remaining: ' + pm.response.headers.get('X-RateLimit-Remaining-Hour'));",
                  "",
                  "// Header Enrichment",
                  "console.log('Header Enrichment:');",
                  "console.log('- Tenant ID: ' + pm.response.headers.get('X-Tenant-ID'));",
                  "",
                  "// OpenTelemetry",
                  "console.log('OpenTelemetry:');",
                  "console.log('- Trace ID: ' + pm.response.headers.get('X-Trace-Id'));",
                  "console.log('- Kong Request ID: ' + pm.response.headers.get('X-Kong-Request-Id'));",
                  "",
                  "// Performance",
                  "console.log('Performance:');",
                  "console.log('- Response Time: ' + pm.response.responseTime + 'ms');",
                  "console.log('- Kong Proxy Latency: ' + pm.response.headers.get('X-Kong-Proxy-Latency') + 'ms');",
                  "console.log('- Kong Upstream Latency: ' + pm.response.headers.get('X-Kong-Upstream-Latency') + 'ms');",
                  "",
                  "// Kong Info",
                  "console.log('Kong Info:');",
                  "console.log('- Server: ' + pm.response.headers.get('Server'));",
                  "console.log('- Via: ' + pm.response.headers.get('Via'));",
                  "",
                  "console.log('=== END HEADER ANALYSIS ===');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Performance testing and comprehensive monitoring"
    },
    {
      "name": "6. New Service Testing",
      "item": [
        {
          "name": "Test New Service (No Auth) - Should Fail",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/my-new-service/get",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["my-new-service", "get"]
            },
            "description": "Test the new service without JWT token - should fail due to dynamic-jwt plugin"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Request should fail without JWT token', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Should return JWT authentication error', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('JWT');",
                  "});",
                  "",
                  "console.log('Response: ' + pm.response.text());"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Test New Service (With JWT) - Should Success",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/my-new-service/get",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["my-new-service", "get"]
            },
            "description": "Test the new service with valid JWT token - should succeed"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Request should succeed with JWT token', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Should have rate limiting headers', function () {",
                  "    pm.expect(pm.response.headers.has('X-RateLimit-Limit-Minute')).to.be.true;",
                  "    pm.expect(pm.response.headers.has('X-RateLimit-Remaining-Minute')).to.be.true;",
                  "});",
                  "",
                  "pm.test('Should have Kong proxy headers', function () {",
                  "    pm.expect(pm.response.headers.has('X-Kong-Response-Latency')).to.be.true;",
                  "    pm.expect(pm.response.headers.has('X-Kong-Request-Id')).to.be.true;",
                  "});",
                  "",
                  "// Log response details",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Rate Limit - Remaining: ' + pm.response.headers.get('X-RateLimit-Remaining-Minute'));",
                  "console.log('Kong Response Latency: ' + pm.response.headers.get('X-Kong-Response-Latency') + 'ms');",
                  "",
                  "// Check if httpbin.org responded correctly",
                  "if (pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        console.log('Backend Service (httpbin.org) Response: ' + JSON.stringify(response.url));",
                  "    } catch (e) {",
                  "        console.log('Backend response: ' + pm.response.text().substring(0, 200));",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Test New Service POST with Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"test_key\\\": \\\"test_value\\\",\\n  \\\"timestamp\\\": \\\"{{$timestamp}}\\\",\\n  \\\"service_name\\\": \\\"{{NEW_SERVICE_NAME}}\\\"\\n}"
            },
            "url": {
              "raw": "{{kong_loadbalancer_url}}/my-new-service/post",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["my-new-service", "post"]
            },
            "description": "Test POST request to the new service with JSON data"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('POST request should succeed', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Should echo the posted data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.json.test_key).to.eql('test_value');",
                  "    pm.expect(response.json.service_name).to.eql(pm.collectionVariables.get('NEW_SERVICE_NAME'));",
                  "});",
                  "",
                  "pm.test('Should have all security headers', function () {",
                  "    pm.expect(pm.response.headers.has('X-RateLimit-Limit-Minute')).to.be.true;",
                  "    pm.expect(pm.response.headers.has('X-Kong-Response-Latency')).to.be.true;",
                  "});",
                  "",
                  "console.log('POST Response Status: ' + pm.response.code);",
                  "console.log('Rate Limit Status: ' + pm.response.headers.get('X-RateLimit-Remaining-Minute') + '/' + pm.response.headers.get('X-RateLimit-Limit-Minute'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Test Rate Limiting on New Service",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "{{host_header}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{kong_loadbalancer_url}}/my-new-service/get?test=rate-limit",
              "host": ["{{kong_loadbalancer_url}}"],
              "path": ["my-new-service", "get"],
              "query": [
                {
                  "key": "test",
                  "value": "rate-limit"
                }
              ]
            },
            "description": "Test rate limiting on the new service - make multiple requests to see rate limit headers change"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Request should succeed (within rate limit)', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Rate limiting headers should be present', function () {",
                  "    pm.expect(pm.response.headers.has('X-RateLimit-Limit-Minute')).to.be.true;",
                  "    pm.expect(pm.response.headers.has('X-RateLimit-Remaining-Minute')).to.be.true;",
                  "    pm.expect(pm.response.headers.has('X-RateLimit-Limit-Hour')).to.be.true;",
                  "    pm.expect(pm.response.headers.has('X-RateLimit-Remaining-Hour')).to.be.true;",
                  "});",
                  "",
                  "// Log current rate limit status",
                  "console.log('=== RATE LIMIT STATUS ===');",
                  "console.log('Minute - Used: ' + (50 - parseInt(pm.response.headers.get('X-RateLimit-Remaining-Minute'))) + '/50');",
                  "console.log('Hour - Used: ' + (1000 - parseInt(pm.response.headers.get('X-RateLimit-Remaining-Hour'))) + '/1000');",
                  "console.log('Day - Used: ' + (10000 - parseInt(pm.response.headers.get('X-RateLimit-Remaining-Day'))) + '/10000');",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  "",
                  "// Check if approaching rate limit",
                  "const remaining = parseInt(pm.response.headers.get('X-RateLimit-Remaining-Minute'));",
                  "if (remaining < 10) {",
                  "    console.log('⚠️  WARNING: Approaching rate limit! Only ' + remaining + ' requests remaining this minute');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Test the newly created service through Kong Gateway with all plugins"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Request to: ' + pm.request.url.toString());",
          "console.log('Method: ' + pm.request.method);",
          "",
          "// Check if JWT token exists for protected endpoints",
          "if (pm.request.url.toString().includes('kong_loadbalancer_url') && !pm.request.headers.get('Authorization')) {",
          "    console.log('Warning: No Authorization header found for Kong Gateway request');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "console.log('Response Code: ' + pm.response.code);",
          "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
          "",
          "// Log important headers if they exist",
          "if (pm.response.headers.has('X-Trace-Id')) {",
          "    console.log('Trace ID: ' + pm.response.headers.get('X-Trace-Id'));",
          "}",
          "",
          "if (pm.response.headers.has('X-Kong-Request-Id')) {",
          "    console.log('Kong Request ID: ' + pm.response.headers.get('X-Kong-Request-Id'));",
          "}"
        ]
      }
    }
  ]
} 