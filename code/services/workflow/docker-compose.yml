version: '3.8'

# Reusable logging policy for all services (prevents host disk bloat)
x-logging: &json-logging
  driver: json-file
  options:
    max-size: "50m"
    max-file: "5"

services:
  postgres:
    container_name: postgres
    image: postgres:15-alpine
    mem_limit: 1g
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    labels:
      - env=dev
      - app=postgres
    logging: *json-logging

  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    labels:
      - env=dev
      - app=redis
    logging: *json-logging

  workflow-service:
    container_name: workflow-service
    image: mithunhegdeegov/workflowgo:multiarch10
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: postgres
      SERVER_PORT: 8080
    ports:
      - "8085:8080"
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - env=dev
      - app=workflow-service
    logging: *json-logging

  localisation:
    container_name: localisation
    image: mithunhegdeegov/localisationgo:multiarch11
    environment:
      REST_PORT: 8088
      GRPC_PORT: 8089
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: postgres
      DB_SSL_MODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      CACHE_EXPIRATION: 24h
    ports:
      - "8088:8088"
      - "8089:8089"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    labels:
      - env=dev
      - app=localisation
    logging: *json-logging

  keycloak:
    container_name: keycloak
    image: egovio/keycloak:keycloak-spi-multiarch
    mem_limit: 1g
    environment:
      KC_PROXY: edge
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_PORT: "8080"
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_RELATIVE_PATH: /keycloak-test
      KC_DB_URL: jdbc:postgresql://postgres:5432/postgres
      KC_DB: postgres
      DB_PORT: 5432
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_EVENTS_LISTENERS: jboss-logging,register-citizen-listener
      KC_SPI_EVENTS_LISTENER_REGISTER_CITIZEN_LISTENER_ENABLED: "true"
      KC_FEATURES: admin-fine-grained-authz,token-exchange
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - env=dev
      - app=keycloak
    logging: *json-logging

  notification:
    container_name: notification
    image: mithunhegdeegov/notification:multiarch
    environment:
      HTTP_PORT: 8080
      SERVER_CONTEXT_PATH: /notification
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: postgres
      DB_SSL_MODE: disable
      MIGRATION_SCRIPT_PATH: ./migrations
      MIGRATION_ENABLED: "false"
      TEMPLATE_CONFIG_HOST: http://template-config:8081
      TEMPLATE_CONFIG_PATH: /template-config/v1/render
      FILESTORE_HOST: http://localhost:8082
      FILESTORE_PATH: /filestore/v1/files
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USERNAME: example@gmail.com
      SMTP_PASSWORD: ""
      SMTP_FROM_ADDRESS: example@gmail.com
      SMTP_FROM_NAME: egov
      SMS_PROVIDER_URL: http://api.smscountry.com/SMSCwebservice_bulk.aspx
      SMS_PROVIDER_USERNAME: ""
      SMS_PROVIDER_PASSWORD: ""
      SMS_PROVIDER_CONTENT_TYPE: application/x-www-form-urlencoded
      MESSAGE_BROKER_ENABLED: "true"
      MESSAGE_BROKER_TYPE: REDIS
      EMAIL_TOPIC: notification-email
      SMS_TOPIC: notification-sms
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
    ports:
      - "8091:8080"
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - env=dev
      - app=notification
    logging: *json-logging

  template-config:
    container_name: template-config
    image: mithunhegdeegov/template-config:multiarch
    environment:
      HTTP_PORT: 8081
      SERVER_CONTEXT_PATH: /template-config/v1
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: postgres
      DB_SSL_MODE: disable
      MIGRATION_SCRIPT_PATH: ./migrations
      MIGRATION_ENABLED: "false"
    ports:
      - "8092:8081"
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - env=dev
      - app=template-config
    logging: *json-logging

  boundary-service:
    container_name: boundary-service
    image: sahuaradhya222/boundary-go:v5.0.0
    environment:
      SERVER_PORT: 8081
      SERVER_CONTEXT_PATH: /boundary-service
      SERVER_READ_TIMEOUT: 30
      SERVER_WRITE_TIMEOUT: 30
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: postgres
      DB_SSL_MODE: disable
      FILESTORE_BASEPATH: http://localhost:8001
      FILESTORE_ENDPOINT: /filestore/v1/files
      CACHE_TYPE: redis
      CACHE_REDIS_ADDR: redis:6379
      CACHE_REDIS_PASSWORD: ""
      CACHE_REDIS_DB: 0
    ports:
      - "8093:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    labels:
      - env=dev
      - app=boundary-service
    logging: *json-logging

  tenant-management:
    container_name: tenant-management
    image: sahuaradhya222/tenant-management-go:v8.0.0
    environment:
      SERVER_PORT: 8081
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: postgres
      DB_SSL_MODE: disable
      KEYCLOAK_BASE_URL: http://keycloak:8080/keycloak-test
      KEYCLOAK_ADMIN_USER: admin
      KEYCLOAK_ADMIN_PASS: admin
      KEYCLOAK_REALM_CONFIG_PATH: ""
      NOTIFICATION_BASE_URL: http://notification:8080
      CITIZEN_BROKER_CLIENT_ID: citizen-broker
      CITIZEN_BROKER_CLIENT_SECRET: sW2iIWd6Da8JpeGoAuWWcnbDFYT31rk3-clientsecrete
    ports:
      - "8094:8081"
    depends_on:
      keycloak:
        condition: service_started
    labels:
      - env=dev
      - app=tenant-management
    logging: *json-logging

  kong-migration:
    container_name: kong-migration
    image: mithunhegdeegov/gateway-kong:multiarch1
    command: ["kong", "migrations", "bootstrap"]
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_USER: postgres
      KONG_PG_PASSWORD: password
      KONG_PG_DATABASE: postgres
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    labels:
      - env=dev
      - app=kong-migration
    logging: *json-logging

  kong:
    container_name: kong
    image: mithunhegdeegov/gateway-kong:multiarch2
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_USER: postgres
      KONG_PG_PASSWORD: password
      KONG_PG_DATABASE: postgres
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: "bundled,dynamic-jwt,keycloak-rbac,header-enrichment"
      KONG_PLUGIN_DYNAMIC_JWT_KEYCLOAK_BASE_URL: "http://keycloak:8080/keycloak-test"
      KONG_PLUGIN_KEYCLOAK_RBAC_ALLOWED_ROLES: "admin,user"
    ports:
      - "8095:8000"   # Proxy HTTP
      - "8096:8443"   # Proxy HTTPS  
      - "8097:8001"   # Admin API
    depends_on:
      kong-migration:
        condition: service_completed_successfully
    labels:
      - env=dev
      - app=kong
    logging: *json-logging

  minio:
    container_name: minio
    image: minio/minio:latest
    ports:
      - "9002:9000"   # MinIO API
      - "9003:9001"   # MinIO Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    labels:
      - env=dev
      - app=minio
    logging: *json-logging

  vault:
    container_name: vault
    image: hashicorp/vault:1.17
    cap_add:
      - IPC_LOCK
    ports:
      - "8202:8200"
    volumes:
      - vault_data:/vault/data
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    command: vault server -dev
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
    labels:
      - env=dev
      - app=vault
    logging: *json-logging

  urlshortener:
    container_name: urlshortener
    image: egovio/urlshortener:urlshorterner_digit3.0-88d8e65
    environment:
      REST_PORT: 8088
      GRPC_PORT: 8089
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: postgres
      DB_SSL_MODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
    ports:
      - "8098:8088"
      - "8099:8089"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    labels:
      - env=dev
      - app=urlshortener
    logging: *json-logging

  idgen:
    container_name: idgen
    image: sahuaradhya222/idgen:fixed
    environment:
      REST_PORT: 8088
      GRPC_PORT: 8089
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: postgres
      DB_SSL_MODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
    ports:
      - "8100:8088"
      - "8101:8089"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    labels:
      - env=dev
      - app=idgen
    logging: *json-logging

  filestore:
    container_name: filestore
    image: mithunhegdeegov/filestore:multiarch4
    mem_limit: 512m
    environment:
      SERVER_PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_SSL_MODE: disable
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: password
      MINIO_BUCKET: digit
      MINIO_READ_BUCKET: digit
      MINIO_USE_SSL: "false"
      ISNFSSTORAGEENABLED: "false"
      ISS3ENABLED: "true"
      MINIO_ACCESS_KEY: digit
      MINIO_SECRET_KEY: Digit@123
      IS_BUCKET_FIXED: "true"
      FIXED_BUCKETNAME: unified-dev-bucket-s3
      JAVA_OPTS: -Xmx256m -Xms256m
      MINIO_ENDPOINT: minio:9000
      FLYWAY_ENABLED: "false"
      SPRING_FLYWAY_ENABLED: "false"
      MANAGEMENT_ENDPOINTS_WEB_BASE_PATH: /
      APP_TIMEZONE: Asia/Kolkata
      IS_ENVIRONMENT_CENTRAL_INSTANCE: "false"
      SPRING_JPA_SHOW_SQL: "false"
      TRACER_OPENTRACING_ENABLED: "false"
    ports:
      - "8102:8080"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/filestore/health"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 30s
    labels:
      - env=dev
      - app=filestore
    logging: *json-logging

  # ---------- Centralized logging stack ----------
  loki:
    container_name: loki
    image: grafana/loki:2.9.8
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./loki-config.yaml:/etc/loki/local-config.yaml:ro
    restart: unless-stopped
    labels:
      - env=dev
      - app=loki
    logging: *json-logging

  promtail:
    container_name: promtail
    image: grafana/promtail:2.9.8
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
    depends_on:
      - loki
    restart: unless-stopped
    ports:
      - "9080:9080"   # Promtail UI (targets, metrics) - optional expose
    labels:
      - env=dev
      - app=promtail
    logging: *json-logging

  grafana:
    container_name: grafana
    image: grafana/grafana:11.1.3
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - loki
    restart: unless-stopped
    labels:
      - env=dev
      - app=grafana
    logging: *json-logging

volumes:
  postgres_data:
    name: postgres_data
  redis_data:
    name: redis_data
  minio_data:
    name: minio_data
  vault_data:
    name: vault_data
  loki_data:
    name: loki_data
  grafana_data:
    name: grafana_data 