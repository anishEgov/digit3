// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/proto/localization/v1/localization.proto

package localizationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocalizationService_SearchMessages_FullMethodName      = "/localization.v1.LocalizationService/SearchMessages"
	LocalizationService_CreateMessages_FullMethodName      = "/localization.v1.LocalizationService/CreateMessages"
	LocalizationService_UpdateMessages_FullMethodName      = "/localization.v1.LocalizationService/UpdateMessages"
	LocalizationService_UpsertMessages_FullMethodName      = "/localization.v1.LocalizationService/UpsertMessages"
	LocalizationService_DeleteMessages_FullMethodName      = "/localization.v1.LocalizationService/DeleteMessages"
	LocalizationService_BustCache_FullMethodName           = "/localization.v1.LocalizationService/BustCache"
	LocalizationService_FindMissingMessages_FullMethodName = "/localization.v1.LocalizationService/FindMissingMessages"
)

// LocalizationServiceClient is the client API for LocalizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalizationServiceClient interface {
	// Search messages
	SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*SearchMessagesResponse, error)
	// Create messages
	CreateMessages(ctx context.Context, in *CreateMessagesRequest, opts ...grpc.CallOption) (*CreateMessagesResponse, error)
	// Update messages
	UpdateMessages(ctx context.Context, in *UpdateMessagesRequest, opts ...grpc.CallOption) (*UpdateMessagesResponse, error)
	// Upsert messages
	UpsertMessages(ctx context.Context, in *UpsertMessagesRequest, opts ...grpc.CallOption) (*UpsertMessagesResponse, error)
	// Delete messages
	DeleteMessages(ctx context.Context, in *DeleteMessagesRequest, opts ...grpc.CallOption) (*DeleteMessagesResponse, error)
	// Bust cache
	BustCache(ctx context.Context, in *BustCacheRequest, opts ...grpc.CallOption) (*BustCacheResponse, error)
	// Find missing messages
	FindMissingMessages(ctx context.Context, in *FindMissingMessagesRequest, opts ...grpc.CallOption) (*FindMissingMessagesResponse, error)
}

type localizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalizationServiceClient(cc grpc.ClientConnInterface) LocalizationServiceClient {
	return &localizationServiceClient{cc}
}

func (c *localizationServiceClient) SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*SearchMessagesResponse, error) {
	out := new(SearchMessagesResponse)
	err := c.cc.Invoke(ctx, LocalizationService_SearchMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) CreateMessages(ctx context.Context, in *CreateMessagesRequest, opts ...grpc.CallOption) (*CreateMessagesResponse, error) {
	out := new(CreateMessagesResponse)
	err := c.cc.Invoke(ctx, LocalizationService_CreateMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) UpdateMessages(ctx context.Context, in *UpdateMessagesRequest, opts ...grpc.CallOption) (*UpdateMessagesResponse, error) {
	out := new(UpdateMessagesResponse)
	err := c.cc.Invoke(ctx, LocalizationService_UpdateMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) UpsertMessages(ctx context.Context, in *UpsertMessagesRequest, opts ...grpc.CallOption) (*UpsertMessagesResponse, error) {
	out := new(UpsertMessagesResponse)
	err := c.cc.Invoke(ctx, LocalizationService_UpsertMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) DeleteMessages(ctx context.Context, in *DeleteMessagesRequest, opts ...grpc.CallOption) (*DeleteMessagesResponse, error) {
	out := new(DeleteMessagesResponse)
	err := c.cc.Invoke(ctx, LocalizationService_DeleteMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) BustCache(ctx context.Context, in *BustCacheRequest, opts ...grpc.CallOption) (*BustCacheResponse, error) {
	out := new(BustCacheResponse)
	err := c.cc.Invoke(ctx, LocalizationService_BustCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) FindMissingMessages(ctx context.Context, in *FindMissingMessagesRequest, opts ...grpc.CallOption) (*FindMissingMessagesResponse, error) {
	out := new(FindMissingMessagesResponse)
	err := c.cc.Invoke(ctx, LocalizationService_FindMissingMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalizationServiceServer is the server API for LocalizationService service.
// All implementations must embed UnimplementedLocalizationServiceServer
// for forward compatibility
type LocalizationServiceServer interface {
	// Search messages
	SearchMessages(context.Context, *SearchMessagesRequest) (*SearchMessagesResponse, error)
	// Create messages
	CreateMessages(context.Context, *CreateMessagesRequest) (*CreateMessagesResponse, error)
	// Update messages
	UpdateMessages(context.Context, *UpdateMessagesRequest) (*UpdateMessagesResponse, error)
	// Upsert messages
	UpsertMessages(context.Context, *UpsertMessagesRequest) (*UpsertMessagesResponse, error)
	// Delete messages
	DeleteMessages(context.Context, *DeleteMessagesRequest) (*DeleteMessagesResponse, error)
	// Bust cache
	BustCache(context.Context, *BustCacheRequest) (*BustCacheResponse, error)
	// Find missing messages
	FindMissingMessages(context.Context, *FindMissingMessagesRequest) (*FindMissingMessagesResponse, error)
	mustEmbedUnimplementedLocalizationServiceServer()
}

// UnimplementedLocalizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocalizationServiceServer struct {
}

func (UnimplementedLocalizationServiceServer) SearchMessages(context.Context, *SearchMessagesRequest) (*SearchMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessages not implemented")
}
func (UnimplementedLocalizationServiceServer) CreateMessages(context.Context, *CreateMessagesRequest) (*CreateMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessages not implemented")
}
func (UnimplementedLocalizationServiceServer) UpdateMessages(context.Context, *UpdateMessagesRequest) (*UpdateMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessages not implemented")
}
func (UnimplementedLocalizationServiceServer) UpsertMessages(context.Context, *UpsertMessagesRequest) (*UpsertMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMessages not implemented")
}
func (UnimplementedLocalizationServiceServer) DeleteMessages(context.Context, *DeleteMessagesRequest) (*DeleteMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessages not implemented")
}
func (UnimplementedLocalizationServiceServer) BustCache(context.Context, *BustCacheRequest) (*BustCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BustCache not implemented")
}
func (UnimplementedLocalizationServiceServer) FindMissingMessages(context.Context, *FindMissingMessagesRequest) (*FindMissingMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMissingMessages not implemented")
}
func (UnimplementedLocalizationServiceServer) mustEmbedUnimplementedLocalizationServiceServer() {}

// UnsafeLocalizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalizationServiceServer will
// result in compilation errors.
type UnsafeLocalizationServiceServer interface {
	mustEmbedUnimplementedLocalizationServiceServer()
}

func RegisterLocalizationServiceServer(s grpc.ServiceRegistrar, srv LocalizationServiceServer) {
	s.RegisterService(&LocalizationService_ServiceDesc, srv)
}

func _LocalizationService_SearchMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).SearchMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_SearchMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).SearchMessages(ctx, req.(*SearchMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_CreateMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).CreateMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_CreateMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).CreateMessages(ctx, req.(*CreateMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_UpdateMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).UpdateMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_UpdateMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).UpdateMessages(ctx, req.(*UpdateMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_UpsertMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).UpsertMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_UpsertMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).UpsertMessages(ctx, req.(*UpsertMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_DeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).DeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_DeleteMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).DeleteMessages(ctx, req.(*DeleteMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_BustCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BustCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).BustCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_BustCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).BustCache(ctx, req.(*BustCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_FindMissingMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMissingMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).FindMissingMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_FindMissingMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).FindMissingMessages(ctx, req.(*FindMissingMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalizationService_ServiceDesc is the grpc.ServiceDesc for LocalizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localization.v1.LocalizationService",
	HandlerType: (*LocalizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchMessages",
			Handler:    _LocalizationService_SearchMessages_Handler,
		},
		{
			MethodName: "CreateMessages",
			Handler:    _LocalizationService_CreateMessages_Handler,
		},
		{
			MethodName: "UpdateMessages",
			Handler:    _LocalizationService_UpdateMessages_Handler,
		},
		{
			MethodName: "UpsertMessages",
			Handler:    _LocalizationService_UpsertMessages_Handler,
		},
		{
			MethodName: "DeleteMessages",
			Handler:    _LocalizationService_DeleteMessages_Handler,
		},
		{
			MethodName: "BustCache",
			Handler:    _LocalizationService_BustCache_Handler,
		},
		{
			MethodName: "FindMissingMessages",
			Handler:    _LocalizationService_FindMissingMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/localization/v1/localization.proto",
}
